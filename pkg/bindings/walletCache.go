// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package bindings

import (
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = abi.U256
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// WalletCacheABI is the input ABI used to generate the binding from.
const WalletCacheABI = "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_ens_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_defaultDailyLimit_\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_controllerNode_\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_licenceNode_\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_tokenWhitelistNode_\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_walletDeployerNode_\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contractWallet\",\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"CachedWallet\",\"type\":\"event\"},{\"constant\":false,\"inputs\":[],\"name\":\"cacheWallet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"cachedWallets\",\"outputs\":[{\"internalType\":\"contractWallet\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cachedWalletsCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"controllerNode\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"defaultDailyLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ensRegistry\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"licenceNode\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenWhitelistNode\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"walletCachePop\",\"outputs\":[{\"internalType\":\"contractWallet\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"walletDeployerNode\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]"

// WalletCacheBin is the compiled bytecode used for deploying new contracts.
var WalletCacheBin = "0x60806040527f7f2ce995617d2816b426c5c8698c5ec2952f7a34bb10f38326f74933d58936976001557fd0ff8bd67f6e25e4e4b010df582a36a0ee9b78e49afe6cc1cff5dd5a830403306002557fe84f90570f13fe09f288f2411ff9cf50da611ed0c7db7f73d48053ffc974d3966003557f1d0c0adbe6addd93659446311e0767a56b67d41ef38f0cb66dcf7560d28a5a386004553480156100a057600080fd5b50604051615c58380380615c58833981810160405260c08110156100c357600080fd5b508051602082015160408301516060840151608085015160a090950151600080546001600160a01b0319166001600160a01b03871617905593949293919290918380156101105760018190555b50600680546001600160a01b0319166001600160a01b0388161790556007859055821561013d5760028390555b81156101495760038290555b80156101555760048190555b505050505050615aee8061016a6000396000f3fe60806040523480156200001157600080fd5b5060043610620000b85760003560e01c8063877337b0116200007b578063877337b0146200011f57806387e8bed11462000129578063a4570e511462000133578063c76b0888146200013d578063e2b4ce971462000147578063fc6cabe7146200015157620000b8565b80633f15457f14620000bd57806360dbc5de14620000e357806371b9076a14620000ef578063747c31d6146200010b5780637d73b2311462000115575b600080fd5b620000c762000171565b604080516001600160a01b039092168252519081900360200190f35b620000ed62000180565b005b620000f9620002a5565b60408051918252519081900360200190f35b620000f9620002ab565b620000c7620002b1565b620000f9620002c0565b620000f9620002c6565b620000c7620002cc565b620000f9620003bb565b620000f9620003c1565b620000c7600480360360208110156200016957600080fd5b5035620003c7565b6006546001600160a01b031681565b60006200018f600454620003ef565b6006546003546001916001600160a01b031690620001ac620003c1565b600254600754604051620001c090620004e9565b6001600160a01b0397881681529515156020870152939095166040808601919091526060850192909252608084015260a083019390935260c082015290519081900360e001906000f0801580156200021c573d6000803e3d6000fd5b50600580546001810182556000919091527f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db00180546001600160a01b0383166001600160a01b0319909116811790915560408051918252519192507f9ede7876a6b2454072ceeaff4b6b4e6eaa5381db241b850f2a46034136fc2e6e919081900360200190a150565b60055490565b60025481565b6000546001600160a01b031690565b60035481565b60045481565b6000620002db600454620003ef565b6001600160a01b0316336001600160a01b03161462000341576040805162461bcd60e51b815260206004820152601d60248201527f6e6f742063616c6c65642062792077616c6c65742d6465706c6f796572000000604482015290519081900360640190fd5b6005546001111562000357576200035762000180565b600580546000919060001981019081106200036e57fe5b600091825260209091200154600580546001600160a01b03909216925090806200039457fe5b600082815260209020810160001990810180546001600160a01b0319169055019055905090565b60075481565b60015490565b60058181548110620003d557fe5b6000918252602090912001546001600160a01b0316905081565b6000805460408051630178b8bf60e01b81526004810185905290516001600160a01b0390921691630178b8bf91602480820192602092909190829003018186803b1580156200043d57600080fd5b505afa15801562000452573d6000803e3d6000fd5b505050506040513d60208110156200046957600080fd5b505160408051631d9dabef60e11b81526004810185905290516001600160a01b0390921691633b3b57de91602480820192602092909190829003018186803b158015620004b557600080fd5b505afa158015620004ca573d6000803e3d6000fd5b505050506040513d6020811015620004e157600080fd5b505192915050565b6155c280620004f88339019056fe60806040527f7f2ce995617d2816b426c5c8698c5ec2952f7a34bb10f38326f74933d58936976001553480156200003557600080fd5b50604051620055c2380380620055c2833981810160405260e08110156200005b57600080fd5b508051602082015160408301516060840151608085015160a086015160c090960151600080546001600160a01b0319166001600160a01b03861617905594959394929391929091908084808989878015620000b65760018190555b50600280546001600160a01b0319166001600160a01b0384161760ff60a01b1916600160a01b8315158102919091179182905560ff9104166200013057604080516001600160a01b038416815290517f808639ff9c8e4732d60b6c2330de498035416d229f27a77d259680895efec1229181900360200190a15b60408051600081526001600160a01b038416602082015281517f850b3df64837d7d518b45f5aa64d104652c3b80eb5b34a8e3d9eb666cb7cdea5929181900390910190a150506002805460ff60a81b1916600160a81b1790556009556000620001a16001600160e01b036200027316565b505050505091505060008111620001ef576040805162461bcd60e51b815260206004820152600d60248201526c37379039ba30b13632b1b7b4b760991b604482015290519081900360640190fd5b808302600a819055600b819055600c8190556200021c4262015180620003f5602090811b620043a217901c565b600d81905560408051838152602081019290925280517fb8d7171194501073e2d8151eeccf1398143c5df9acfb9868d0539a256164f6ca9281900390910190a1505050600f92909255506200055195505050505050565b6060600080600080600080620002916009546200045760201b60201c565b6001600160a01b0316633efec5e96040518163ffffffff1660e01b815260040160006040518083038186803b158015620002ca57600080fd5b505afa158015620002df573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405260e08110156200030957600080fd5b81019080805160405193929190846401000000008211156200032a57600080fd5b9083019060208201858111156200034057600080fd5b82516401000000008111828201881017156200035b57600080fd5b82525081516020918201929091019080838360005b838110156200038a57818101518382015260200162000370565b50505050905090810190601f168015620003b85780820380516001836020036101000a031916815260200191505b5060409081526020820151908201516060830151608084015160a085015160c090950151979f939e50919c509a5098509096509294509192505050565b60008282018381101562000450576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b9392505050565b6000805460408051630178b8bf60e01b81526004810185905290516001600160a01b0390921691630178b8bf91602480820192602092909190829003018186803b158015620004a557600080fd5b505afa158015620004ba573d6000803e3d6000fd5b505050506040513d6020811015620004d157600080fd5b505160408051631d9dabef60e11b81526004810185905290516001600160a01b0390921691633b3b57de91602480820192602092909190829003018186803b1580156200051d57600080fd5b505afa15801562000532573d6000803e3d6000fd5b505050506040513d60208110156200054957600080fd5b505192915050565b61506180620005616000396000f3fe60806040526004361061027d5760003560e01c8063715018a61161014f578063beabacc8116100c1578063cf5e6eea1161007a578063cf5e6eea14610d94578063d251fefc14610e24578063de212bf314610e4e578063e2b4ce9714610e63578063f36febda14610e78578063f421764814610eb15761027d565b8063beabacc814610c25578063cbd2ac6814610c68578063cccdc55614610c92578063cd7958dd14610ca7578063ce0b5bd514610d55578063cf0a866b14610d7f5761027d565b8063877337b011610113578063877337b014610b815780638da5cb5b14610b9657806390e690c714610bab578063ad95580b14610bc0578063b242e53414610bd5578063be40ba7914610c105761027d565b8063715018a614610a94578063747c31d614610aa95780637b580e7514610abe5780637d73b23114610af15780637fd004fa14610b065761027d565b80633b8252fa116101f357806347d125af116101ac57806347d125af146108ad5780634d9aa248146108de5780635adc02ab146108f35780636137d6701461091d57806361817d44146109985780636c37a7e614610a6a5761027d565b80633b8252fa146106d05780633f579f42146106f7578063458d07f21461078757806345b12efc146107b157806346efe0ed146107c657806347b55a9d146108985761027d565b806320c13b0b1161024557806320c13b0b146105175780632121dc75146105e257806326d05ab2146105f7578063294f40251461060c57806332531c3c146106715780633a43199f146106a45761027d565b806301ffc9a7146102b9578063100f23fd146103015780631127b57e1461032d5780631626ba7e146103b75780631aa21fba1461048c575b6040805133815234602082015281517f88a5966d370b9919b20f3e2c13ff65706f196a4e32cc2c12bf57088f88525874929181900390910190a1005b3480156102c557600080fd5b506102ed600480360360208110156102dc57600080fd5b50356001600160e01b031916610f2c565b604080519115158252519081900360200190f35b34801561030d57600080fd5b5061032b6004803603602081101561032457600080fd5b5035610f46565b005b34801561033957600080fd5b506103426110e6565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561037c578181015183820152602001610364565b50505050905090810190601f1680156103a95780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156103c357600080fd5b5061046f600480360360408110156103da57600080fd5b81359190810190604081016020820135600160201b8111156103fb57600080fd5b82018360208201111561040d57600080fd5b803590602001918460018302840111600160201b8311171561042e57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550611107945050505050565b604080516001600160e01b03199092168252519081900360200190f35b34801561049857600080fd5b5061032b600480360360408110156104af57600080fd5b6001600160a01b038235169190810190604081016020820135600160201b8111156104d957600080fd5b8201836020820111156104eb57600080fd5b803590602001918460208302840111600160201b8311171561050c57600080fd5b509092509050611175565b34801561052357600080fd5b5061046f6004803603604081101561053a57600080fd5b810190602081018135600160201b81111561055457600080fd5b82018360208201111561056657600080fd5b803590602001918460018302840111600160201b8311171561058757600080fd5b919390929091602081019035600160201b8111156105a457600080fd5b8201836020820111156105b657600080fd5b803590602001918460018302840111600160201b831117156105d757600080fd5b5090925090506112fb565b3480156105ee57600080fd5b506102ed6113d2565b34801561060357600080fd5b506102ed6113e3565b34801561061857600080fd5b506106216113ec565b60408051602080825283518183015283519192839290830191858101910280838360005b8381101561065d578181015183820152602001610645565b505050509050019250505060405180910390f35b34801561067d57600080fd5b506102ed6004803603602081101561069457600080fd5b50356001600160a01b031661144e565b61032b600480360360408110156106ba57600080fd5b506001600160a01b038135169060200135611463565b3480156106dc57600080fd5b506106e5611699565b60408051918252519081900360200190f35b34801561070357600080fd5b506103426004803603606081101561071a57600080fd5b6001600160a01b0382351691602081013591810190606081016040820135600160201b81111561074957600080fd5b82018360208201111561075b57600080fd5b803590602001918460018302840111600160201b8311171561077c57600080fd5b50909250905061169f565b34801561079357600080fd5b5061032b600480360360208110156107aa57600080fd5b503561173b565b3480156107bd57600080fd5b506106e5611833565b3480156107d257600080fd5b5061032b600480360360608110156107e957600080fd5b81359190810190604081016020820135600160201b81111561080a57600080fd5b82018360208201111561081c57600080fd5b803590602001918460018302840111600160201b8311171561083d57600080fd5b919390929091602081019035600160201b81111561085a57600080fd5b82018360208201111561086c57600080fd5b803590602001918460018302840111600160201b8311171561088d57600080fd5b509092509050611851565b3480156108a457600080fd5b50610621611914565b3480156108b957600080fd5b506108c2611974565b604080516001600160a01b039092168252519081900360200190f35b3480156108ea57600080fd5b506106e5611983565b3480156108ff57600080fd5b5061032b6004803603602081101561091657600080fd5b5035611989565b34801561092957600080fd5b5061032b6004803603602081101561094057600080fd5b810190602081018135600160201b81111561095a57600080fd5b82018360208201111561096c57600080fd5b803590602001918460208302840111600160201b8311171561098d57600080fd5b509092509050611cbd565b3480156109a457600080fd5b5061032b600480360360608110156109bb57600080fd5b81359190810190604081016020820135600160201b8111156109dc57600080fd5b8201836020820111156109ee57600080fd5b803590602001918460018302840111600160201b83111715610a0f57600080fd5b919390929091602081019035600160201b811115610a2c57600080fd5b820183602082011115610a3e57600080fd5b803590602001918460018302840111600160201b83111715610a5f57600080fd5b509092509050611ee3565b348015610a7657600080fd5b5061032b60048036036020811015610a8d57600080fd5b5035612006565b348015610aa057600080fd5b5061032b612199565b348015610ab557600080fd5b506106e5612294565b348015610aca57600080fd5b5061032b60048036036020811015610ae157600080fd5b50356001600160a01b031661229a565b348015610afd57600080fd5b506108c26123ae565b348015610b1257600080fd5b5061032b60048036036020811015610b2957600080fd5b810190602081018135600160201b811115610b4357600080fd5b820183602082011115610b5557600080fd5b803590602001918460208302840111600160201b83111715610b7657600080fd5b5090925090506123bd565b348015610b8d57600080fd5b506106e56126ff565b348015610ba257600080fd5b506108c2612705565b348015610bb757600080fd5b5061032b612714565b348015610bcc57600080fd5b5061032b61276e565b348015610be157600080fd5b5061032b60048036036040811015610bf857600080fd5b506001600160a01b0381351690602001351515612875565b348015610c1c57600080fd5b506102ed612a2c565b348015610c3157600080fd5b5061032b60048036036060811015610c4857600080fd5b506001600160a01b03813581169160208101359091169060400135612a3b565b348015610c7457600080fd5b5061032b60048036036020811015610c8b57600080fd5b5035612bae565b348015610c9e57600080fd5b506106e5612f8f565b348015610cb357600080fd5b506106e560048036036020811015610cca57600080fd5b810190602081018135600160201b811115610ce457600080fd5b820183602082011115610cf657600080fd5b803590602001918460208302840111600160201b83111715610d1757600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929550612f95945050505050565b348015610d6157600080fd5b5061032b60048036036020811015610d7857600080fd5b5035612fef565b348015610d8b57600080fd5b506102ed613193565b348015610da057600080fd5b5061034260048036036060811015610db757600080fd5b6001600160a01b0382351691602081013591810190606081016040820135600160201b811115610de657600080fd5b820183602082011115610df857600080fd5b803590602001918460018302840111600160201b83111715610e1957600080fd5b5090925090506131a3565b348015610e3057600080fd5b506108c260048036036020811015610e4757600080fd5b5035613296565b348015610e5a57600080fd5b506102ed6132bd565b348015610e6f57600080fd5b506106e56132cb565b348015610e8457600080fd5b506106e560048036036040811015610e9b57600080fd5b506001600160a01b0381351690602001356132d1565b348015610ebd57600080fd5b5061032b60048036036020811015610ed457600080fd5b810190602081018135600160201b811115610eee57600080fd5b820183602082011115610f0057600080fd5b803590602001918460208302840111600160201b83111715610f2157600080fd5b50909250905061345a565b6001600160e01b031981166301ffc9a760e01b145b919050565b610f4f336137ac565b80610f5e5750610f5e336137c0565b610fa3576040805162461bcd60e51b81526020600482015260116024820152706f6e6c79206f776e6572206f722032464160781b604482015290519081900360640190fd5b60085460ff16610ff2576040805162461bcd60e51b81526020600482015260156024820152743737903832b73234b7339039bab136b4b9b9b4b7b760591b604482015290519081900360640190fd5b611055600680548060200260200160405190810160405280929190818152602001828054801561104b57602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831161102d575b5050505050612f95565b81146110925760405162461bcd60e51b8152600401808060200182810382526023815260200180614fd46023913960400191505060405180910390fd5b61109e60066000614dfc565b6008805460ff19169055604080513381526020810183905281517f7794eff834d760583543e6e510e717a5e66d2c064e225f4db448343c3e66afcf929181900390910190a150565b60405180604001604052806005815260200164332e312e3160d81b81525081565b60008061111a848463ffffffff6137fc16565b9050611125816137ac565b611163576040805162461bcd60e51b815260206004820152600a60248201526937b7363c9037bbb732b960b11b604482015290519081900360640190fd5b50630b135d3f60e11b90505b92915050565b61117e336137ac565b8061118857503330145b6111cc576040805162461bcd60e51b815260206004820152601060248201526f37b7363c9037bbb732b93e3e39b2b63360811b604482015290519081900360640190fd5b80611215576040805162461bcd60e51b8152602060048201526014602482015273617373657420617272617920697320656d70747960601b604482015290519081900360640190fd5b60005b818110156112785760006112473085858581811061123257fe5b905060200201356001600160a01b03166138ea565b905061126f8585858581811061125957fe5b905060200201356001600160a01b031683612a3b565b50600101611218565b507fd4f62f23021706247dcffea245d104ae7ddaec7f23acf3d11d7136d5de6a69ad83838360405180846001600160a01b03166001600160a01b03168152602001806020018281038252848482818152602001925060200280828437600083820152604051601f909101601f1916909201829003965090945050505050a1505050565b6000808585604051602001808383808284376040805191909301818103601f190182528084528151602092830120601f8b01839004830282018301909452898152929650630b135d3f60e11b9550611372945086935089915088908190840183828082843760009201919091525061110792505050565b6001600160e01b031916146113be576040805162461bcd60e51b815260206004820152600d60248201526c1cda59c81b9bdd081d985b1a59609a1b604482015290519081900360640190fd5b506320c13b0b60e01b90505b949350505050565b600254600160a01b900460ff165b90565b60085460ff1681565b6060600780548060200260200160405190810160405280929190818152602001828054801561144457602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311611426575b5050505050905090565b60046020526000908152604090205460ff1681565b61146c336137ac565b8061147657503330145b6114ba576040805162461bcd60e51b815260206004820152601060248201526f37b7363c9037bbb732b93e3e39b2b63360811b604482015290519081900360640190fd5b6114c382613995565b611509576040805162461bcd60e51b8152602060048201526012602482015271746f6b656e206e6f74206c6f616461626c6560701b604482015290519081900360640190fd5b600061151583836132d1565b9050611520816139af565b600061152d600f54613a5a565b90506001600160a01b038416156115d5576115586001600160a01b038516828563ffffffff613b4e16565b806001600160a01b0316631b3c96b485856040518363ffffffff1660e01b815260040180836001600160a01b03166001600160a01b0316815260200182815260200192505050600060405180830381600087803b1580156115b857600080fd5b505af11580156115cc573d6000803e3d6000fd5b5050505061164f565b806001600160a01b0316631b3c96b48486866040518463ffffffff1660e01b815260040180836001600160a01b03166001600160a01b03168152602001828152602001925050506000604051808303818588803b15801561163557600080fd5b505af1158015611649573d6000803e3d6000fd5b50505050505b604080516001600160a01b03861681526020810185905281517f5f65674bec9af81f71be68674135a0ea3f163fb91984e3893d06da9f6ea2ce8a929181900390910190a150505050565b600c5490565b60606116aa336137ac565b6116f1576040805162461bcd60e51b815260206004820152601360248201527239b2b73232b91034b9903737ba1037bbb732b960691b604482015290519081900360640190fd5b611732858585858080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201829052509250613c66915050565b50949350505050565b611744336137ac565b8061174e57503330145b611792576040805162461bcd60e51b815260206004820152601060248201526f37b7363c9037bbb732b93e3e39b2b63360811b604482015290519081900360640190fd5b600c819055600a5481116117fc57600b548110156117ee57600b819055600d5460408051838152602081019290925280517fb8d7171194501073e2d8151eeccf1398143c5df9acfb9868d0539a256164f6ca9281900390910190a15b6117f78161410e565b611830565b6040805182815290517f065b9ade648867cf901516060dd7a78fad8ab1aec5eb80ee57acbb30badf86ec9181900360200190a15b50565b6000600d544211156118485750600a546113e0565b50600b546113e0565b61185a33614151565b611899576040805162461bcd60e51b815260206004820152601a6024820152600080516020614f26833981519152604482015290519081900360640190fd5b61190d8585858080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525050604080516020601f89018190048102820181019092528781529250879150869081908401838280828437600092018290525092506141b3915050565b5050505050565b60606006805480602002602001604051908101604052809291908181526020018280548015611444576020028201919060005260206000209081546001600160a01b03168152600190910190602001808311611426575050505050905090565b6003546001600160a01b031681565b600a5490565b600254600160a81b900460ff16156119e8576119a433614151565b6119e3576040805162461bcd60e51b815260206004820152601a6024820152600080516020614f26833981519152604482015290519081900360640190fd5b611a35565b6003546001600160a01b03163314611a35576040805162461bcd60e51b815260206004820152601a6024820152600080516020614f8a833981519152604482015290519081900360640190fd5b60085460ff16611a84576040805162461bcd60e51b81526020600482015260156024820152743737903832b73234b7339039bab136b4b9b9b4b7b760591b604482015290519081900360640190fd5b611ae5600680548060200260200160405190810160405280929190818152602001828054801561104b576020028201919060005260206000209081546001600160a01b0316815260019091019060200180831161102d575050505050612f95565b8114611b225760405162461bcd60e51b8152600401808060200182810382526023815260200180614fd46023913960400191505060405180910390fd5b60005b600654811015611c09576004600060068381548110611b4057fe5b60009182526020808320909101546001600160a01b0316835282019290925260400190205460ff16611c015760016004600060068481548110611b7f57fe5b6000918252602080832091909101546001600160a01b031683528201929092526040019020805460ff1916911515919091179055600680546005919083908110611bc557fe5b60009182526020808320909101548354600181018555938352912090910180546001600160a01b0319166001600160a01b039092169190911790555b600101611b25565b507fb2f6cccee7a369e23e293c25aa19bef80af11eb26deba3ea0f2a02783f752e4a33600660405180836001600160a01b03166001600160a01b03168152602001806020018281038252838181548152602001915080548015611c9557602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311611c77575b5050935050505060405180910390a1611cb060066000614dfc565b506008805460ff19169055565b611cc6336137ac565b80611cd057503330145b611d14576040805162461bcd60e51b815260206004820152601060248201526f37b7363c9037bbb732b93e3e39b2b63360811b604482015290519081900360640190fd5b60085460ff16158015611d2f5750600854610100900460ff16155b611d80576040805162461bcd60e51b815260206004820152601c60248201527f77686974656c6973742073756d62697373696f6e2070656e64696e6700000000604482015290519081900360640190fd5b60085462010000900460ff16611dd9576040805162461bcd60e51b81526020600482015260196024820152781dda1a5d195b1a5cdd081b9bdd081a5b9a5d1a585b1a5e9959603a1b604482015290519081900360640190fd5b80611e1d576040805162461bcd60e51b815260206004820152600f60248201526e195b5c1d1e481dda1a5d195b1a5cdd608a1b604482015290519081900360640190fd5b611e2960078383614e1a565b506008805461ff00191661010017905560408051602080840282810182019093528382527ffbc0e5ca6c7e4858daf0fdb185ef5186203e74ec9c64737e93c0aeaec596e1d19285928592611e9892859185918291850190849080828437600092019190915250612f9592505050565b60405180806020018381526020018281038252858582818152602001925060200280828437600083820152604051601f909101601f1916909201829003965090945050505050a15050565b600254600160a81b900460ff1615611f4257611efe33614151565b611f3d576040805162461bcd60e51b815260206004820152601a6024820152600080516020614f26833981519152604482015290519081900360640190fd5b611f8f565b6003546001600160a01b03163314611f8f576040805162461bcd60e51b815260206004820152601a6024820152600080516020614f8a833981519152604482015290519081900360640190fd5b61190d8585858080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525050604080516020601f89018190048102820181019092528781529250879150869081908401838280828437600092019190915250600192506141b3915050565b600254600160a81b900460ff16156120655761202133614151565b612060576040805162461bcd60e51b815260206004820152601a6024820152600080516020614f26833981519152604482015290519081900360640190fd5b6120b2565b6003546001600160a01b031633146120b2576040805162461bcd60e51b815260206004820152601a6024820152600080516020614f8a833981519152604482015290519081900360640190fd5b80600c54146120f25760405162461bcd60e51b8152600401808060200182810382526022815260200180614f046022913960400191505060405180910390fd5b600a5481116121325760405162461bcd60e51b8152600401808060200182810382526028815260200180614edc6028913960400191505060405180910390fd5b600b81905561214a426201518063ffffffff6143a216565b600d819055600b5460408051918252602082019290925281517fb8d7171194501073e2d8151eeccf1398143c5df9acfb9868d0539a256164f6ca929181900390910190a1611830600c5461410e565b6121a2336137ac565b6121e9576040805162461bcd60e51b815260206004820152601360248201527239b2b73232b91034b9903737ba1037bbb732b960691b604482015290519081900360640190fd5b600254600160a01b900460ff16612247576040805162461bcd60e51b815260206004820152601d60248201527f6f776e657273686970206973206e6f74207472616e7366657261626c65000000604482015290519081900360640190fd5b600280546001600160a01b0319169055604080516000808252602082015281517f850b3df64837d7d518b45f5aa64d104652c3b80eb5b34a8e3d9eb666cb7cdea5929181900390910190a1565b600f5490565b6122a3336137ac565b6122ea576040805162461bcd60e51b815260206004820152601360248201527239b2b73232b91034b9903737ba1037bbb732b960691b604482015290519081900360640190fd5b6001600160a01b038116612345576040805162461bcd60e51b815260206004820152601960248201527f3246412063616e6e6f742062652073657420746f207a65726f00000000000000604482015290519081900360640190fd5b600380546001600160a01b0319166001600160a01b0383169081179091556002805460ff60a81b1916905560408051338152602081019290925280517f33635a1d7938fa110d60d48b4ecbefc4afcc07e782ca013f11de948ee7949d1c9281900390910190a150565b6000546001600160a01b031690565b6123c6336137ac565b806123d057503330145b612414576040805162461bcd60e51b815260206004820152601060248201526f37b7363c9037bbb732b93e3e39b2b63360811b604482015290519081900360640190fd5b60085460ff1615801561242f5750600854610100900460ff16155b612480576040805162461bcd60e51b815260206004820152601c60248201527f77686974656c6973742073756d62697373696f6e2070656e64696e6700000000604482015290519081900360640190fd5b8181808060200260200160405190810160405280939291908181526020018383602002808284376000920182905250925050505b815181101561259c576124d98282815181106124cc57fe5b60200260200101516137ac565b15612524576040805162461bcd60e51b8152602060048201526016602482015275636f6e7461696e73206f776e6572206164647265737360501b604482015290519081900360640190fd5b60006001600160a01b031682828151811061253b57fe5b60200260200101516001600160a01b03161415612594576040805162461bcd60e51b8152602060048201526012602482015271636f6e7461696e732030206164647265737360701b604482015290519081900360640190fd5b6001016124b4565b5060085462010000900460ff166125f6576040805162461bcd60e51b81526020600482015260196024820152781dda1a5d195b1a5cdd081b9bdd081a5b9a5d1a585b1a5e9959603a1b604482015290519081900360640190fd5b8161263a576040805162461bcd60e51b815260206004820152600f60248201526e195b5c1d1e481dda1a5d195b1a5cdd608a1b604482015290519081900360640190fd5b61264660068484614e1a565b506008805460ff1916600117905560408051602080850282810182019093528482527f9c80b3b5f68b3e017766d59e8d09b34efe6462b05c398f35cab9e271d9bc3b9c92869286926126b392859185918291850190849080828437600092019190915250612f9592505050565b60405180806020018381526020018281038252858582818152602001925060200280828437600083820152604051601f909101601f1916909201829003965090945050505050a1505050565b60095490565b6002546001600160a01b031690565b61271d336137ac565b612764576040805162461bcd60e51b815260206004820152601360248201527239b2b73232b91034b9903737ba1037bbb732b960691b604482015290519081900360640190fd5b61276c614403565b565b612777336137ac565b6127be576040805162461bcd60e51b815260206004820152601360248201527239b2b73232b91034b9903737ba1037bbb732b960691b604482015290519081900360640190fd5b600254600160a81b900460ff161561281d576040805162461bcd60e51b815260206004820152601b60248201527f6d6f6e6f6c69746832464120616c726561647920656e61626c65640000000000604482015290519081900360640190fd5b6002805460ff60a81b1916600160a81b179055600380546001600160a01b03191690556040805133815290517fea0cce48757f6b222f91e711f59a5a8ec05a3ed3c0a4328fe36cb48f31a869699181900360200190a1565b61287e336137ac565b6128c5576040805162461bcd60e51b815260206004820152601360248201527239b2b73232b91034b9903737ba1037bbb732b960691b604482015290519081900360640190fd5b600254600160a01b900460ff16612923576040805162461bcd60e51b815260206004820152601d60248201527f6f776e657273686970206973206e6f74207472616e7366657261626c65000000604482015290519081900360640190fd5b6001600160a01b0382166129685760405162461bcd60e51b8152600401808060200182810382526023815260200180614f676023913960400191505060405180910390fd5b6002805460ff60a01b1916600160a01b83151502179055806129c157604080516001600160a01b038416815290517f808639ff9c8e4732d60b6c2330de498035416d229f27a77d259680895efec1229181900360200190a15b600254604080516001600160a01b039283168152918416602083015280517f850b3df64837d7d518b45f5aa64d104652c3b80eb5b34a8e3d9eb666cb7cdea59281900390910190a150600280546001600160a01b0319166001600160a01b0392909216919091179055565b60085462010000900460ff1681565b612a44336137ac565b80612a4e57503330145b612a92576040805162461bcd60e51b815260206004820152601060248201526f37b7363c9037bbb732b93e3e39b2b63360811b604482015290519081900360640190fd5b8080612acf576040805162461bcd60e51b8152602060048201526007602482015266076616c75653d360cc1b604482015290519081900360640190fd5b6001600160a01b038416612b1a576040805162461bcd60e51b815260206004820152600d60248201526c064657374696e6174696f6e3d3609c1b604482015290519081900360640190fd5b6001600160a01b03841660009081526004602052604090205460ff16612b53576000612b4684846132d1565b9050612b51816139af565b505b612b5e84848461444b565b604080516001600160a01b0380871682528516602082015280820184905290517fd1ba4ac2e2a11b5101f6cb4d978f514a155b421e8ec396d2d9abaf0bb02917ee9181900360600190a150505050565b600254600160a81b900460ff1615612c0d57612bc933614151565b612c08576040805162461bcd60e51b815260206004820152601a6024820152600080516020614f26833981519152604482015290519081900360640190fd5b612c5a565b6003546001600160a01b03163314612c5a576040805162461bcd60e51b815260206004820152601a6024820152600080516020614f8a833981519152604482015290519081900360640190fd5b600854610100900460ff16612cae576040805162461bcd60e51b81526020600482015260156024820152743737903832b73234b7339039bab136b4b9b9b4b7b760591b604482015290519081900360640190fd5b612d0f600780548060200260200160405190810160405280929190818152602001828054801561104b576020028201919060005260206000209081546001600160a01b0316815260019091019060200180831161102d575050505050612f95565b8114612d4c5760405162461bcd60e51b8152600401808060200182810382526023815260200180614fd46023913960400191505060405180910390fd5b60005b600754811015612eda576004600060078381548110612d6a57fe5b60009182526020808320909101546001600160a01b0316835282019290925260400190205460ff1615612ed25760006004600060078481548110612daa57fe5b6000918252602080832091909101546001600160a01b031683528201929092526040018120805460ff1916921515929092179091555b600554612df490600163ffffffff6144af16565b811015612ebc5760078281548110612e0857fe5b600091825260209091200154600580546001600160a01b039092169183908110612e2e57fe5b6000918252602090912001546001600160a01b03161415612eb457600580546000198101908110612e5b57fe5b600091825260209091200154600580546001600160a01b039092169183908110612e8157fe5b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b03160217905550612ebc565b600101612de0565b506005805490612ed0906000198301614e7d565b505b600101612d4f565b507fd218c430fa348f4ce67791021b6b89c0c3eacd4ead1d8f5b83c60038ec28249b33600760405180836001600160a01b03166001600160a01b03168152602001806020018281038252838181548152602001915080548015612f6657602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311612f48575b5050935050505060405180910390a1612f8160076000614dfc565b506008805461ff0019169055565b600e5481565b60008160405160200180828051906020019060200280838360005b83811015612fc8578181015183820152602001612fb0565b50505050905001915050604051602081830303815290604052805190602001209050919050565b612ff8336137ac565b806130075750613007336137c0565b61304c576040805162461bcd60e51b81526020600482015260116024820152706f6e6c79206f776e6572206f722032464160781b604482015290519081900360640190fd5b600854610100900460ff166130a0576040805162461bcd60e51b81526020600482015260156024820152743737903832b73234b7339039bab136b4b9b9b4b7b760591b604482015290519081900360640190fd5b613101600780548060200260200160405190810160405280929190818152602001828054801561104b576020028201919060005260206000209081546001600160a01b0316815260019091019060200180831161102d575050505050612f95565b811461313e5760405162461bcd60e51b8152600401808060200182810382526023815260200180614fd46023913960400191505060405180910390fd5b61314a60076000614dfc565b6008805461ff0019169055604080513381526020810183905281517f13c935eb475aa0f6e931fece83e2ac44569ce2d53460d29a6dedab40b965c8a3929181900390910190a150565b600254600160a81b900460ff1681565b600254606090600160a81b900460ff1615613205576131c133614151565b613200576040805162461bcd60e51b815260206004820152601a6024820152600080516020614f26833981519152604482015290519081900360640190fd5b613252565b6003546001600160a01b03163314613252576040805162461bcd60e51b815260206004820152601a6024820152600080516020614f8a833981519152604482015290519081900360640190fd5b611732858585858080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525060019250613c66915050565b600581815481106132a357fe5b6000918252602090912001546001600160a01b0316905081565b600854610100900460ff1681565b60015490565b60006132db61450c565b6001600160a01b0316836001600160a01b031614156132fb57508061116f565b816001600160a01b0384161561339657600080600061331987614582565b505050935093509350508061333557600094505050505061116f565b81613370576040805162461bcd60e51b81526020600482015260066024820152650726174653d360d41b604482015290519081900360640190fd5b61339083613384888563ffffffff61471416565b9063ffffffff61476d16565b93505050505b60008060006133a36147d7565b50505093509350935050806133f5576040805162461bcd60e51b8152602060048201526013602482015272746f6b656e206e6f7420617661696c61626c6560681b604482015290519081900360640190fd5b8161343b576040805162461bcd60e51b81526020600482015260116024820152700737461626c65636f696e20726174653d3607c1b604482015290519081900360640190fd5b61344f82613384868663ffffffff61471416565b979650505050505050565b613463336137ac565b8061346d57503330145b6134b1576040805162461bcd60e51b815260206004820152601060248201526f37b7363c9037bbb732b93e3e39b2b63360811b604482015290519081900360640190fd5b8181808060200260200160405190810160405280939291908181526020018383602002808284376000920182905250925050505b81518110156135c0576134fd8282815181106124cc57fe5b15613548576040805162461bcd60e51b8152602060048201526016602482015275636f6e7461696e73206f776e6572206164647265737360501b604482015290519081900360640190fd5b60006001600160a01b031682828151811061355f57fe5b60200260200101516001600160a01b031614156135b8576040805162461bcd60e51b8152602060048201526012602482015271636f6e7461696e732030206164647265737360701b604482015290519081900360640190fd5b6001016134e5565b5060085462010000900460ff1615613617576040805162461bcd60e51b81526020600482015260156024820152741dda1a5d195b1a5cdd081a5b9a5d1a585b1a5e9959605a1b604482015290519081900360640190fd5b60005b82811015613708576004600085858481811061363257fe5b602090810292909201356001600160a01b03168352508101919091526040016000205460ff166137005760016004600086868581811061366e57fe5b905060200201356001600160a01b03166001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a81548160ff02191690831515021790555060058484838181106136c357fe5b835460018101855560009485526020948590200180546001600160a01b0319166001600160a01b0395909202939093013593909316929092179055505b60010161361a565b506008805462ff0000191662010000179055604080513380825260208201838152600580549484018590527fb2f6cccee7a369e23e293c25aa19bef80af11eb26deba3ea0f2a02783f752e4a949293909290919060608301908490801561379857602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831161377a575b5050935050505060405180910390a1505050565b6002546001600160a01b0390811691161490565b600254600090600160a81b900460ff16156137e5576137de82614151565b9050610f41565b506003546001600160a01b03828116911614610f41565b6000815160411461380f5750600061116f565b60208201516040830151606084015160001a7f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0821115613855576000935050505061116f565b8060ff16601b1415801561386d57508060ff16601c14155b1561387e576000935050505061116f565b6040805160008152602080820180845289905260ff8416828401526060820186905260808201859052915160019260a0808401939192601f1981019281900390910190855afa1580156138d5573d6000803e3d6000fd5b5050604051601f190151979650505050505050565b60006001600160a01b0382161561398457816001600160a01b03166370a08231846040518263ffffffff1660e01b815260040180826001600160a01b03166001600160a01b0316815260200191505060206040518083038186803b15801561395157600080fd5b505afa158015613965573d6000803e3d6000fd5b505050506040513d602081101561397b57600080fd5b5051905061116f565b506001600160a01b0382163161116f565b6000806139a183614582565b509098975050505050505050565b6139b7614946565b80600b541015613a01576040805162461bcd60e51b815260206004820152601060248201526f185d985a5b18589b194f185b5bdd5b9d60821b604482015290519081900360640190fd5b600b54613a14908263ffffffff6144af16565b600b819055600d5460408051928352602083019190915280517fb8d7171194501073e2d8151eeccf1398143c5df9acfb9868d0539a256164f6ca9281900390910190a150565b6000805460408051630178b8bf60e01b81526004810185905290516001600160a01b0390921691630178b8bf91602480820192602092909190829003018186803b158015613aa757600080fd5b505afa158015613abb573d6000803e3d6000fd5b505050506040513d6020811015613ad157600080fd5b505160408051631d9dabef60e11b81526004810185905290516001600160a01b0390921691633b3b57de91602480820192602092909190829003018186803b158015613b1c57600080fd5b505afa158015613b30573d6000803e3d6000fd5b505050506040513d6020811015613b4657600080fd5b505192915050565b801580613bd4575060408051636eb1769f60e11b81523060048201526001600160a01b03848116602483015291519185169163dd62ed3e91604480820192602092909190829003018186803b158015613ba657600080fd5b505afa158015613bba573d6000803e3d6000fd5b505050506040513d6020811015613bd057600080fd5b5051155b613c0f5760405162461bcd60e51b8152600401808060200182810382526036815260200180614ff76036913960400191505060405180910390fd5b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663095ea7b360e01b179052613c6190849061496e565b505050565b6001600160a01b03841660009081526004602052604090205460609060ff16158015613c90575081155b15613c9e57613c9e846139af565b613cb0856001600160a01b0316614b2c565b8015613cc05750613cc085614b32565b15613eab57600080613cd28786614b4c565b6001600160a01b038216600090815260046020526040902054919350915060ff16158015613cfe575083155b15613d1c576000613d0f88836132d1565b9050613d1a816139af565b505b613d356001600160a01b0388168663ffffffff61496e16565b604080516020808252818301909252606091602082018180388339019050509050600160f81b81601f81518110613d6857fe5b60200101906001600160f81b031916908160001a9053507ff77753fab406ecfff96d6ff2476c64a838fa9f6d37b1bf190f8546e395e3b6138888888460405180856001600160a01b03166001600160a01b031681526020018481526020018060200180602001838103835285818151815260200191508051906020019080838360005b83811015613e03578181015183820152602001613deb565b50505050905090810190601f168015613e305780820380516001836020036101000a031916815260200191505b50838103825284518152845160209182019186019080838360005b83811015613e63578181015183820152602001613e4b565b50505050905090810190601f168015613e905780820380516001836020036101000a031916815260200191505b50965050505050505060405180910390a192506113ca915050565b60006060866001600160a01b031686866040518082805190602001908083835b60208310613eea5780518252601f199092019160209182019101613ecb565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d8060008114613f4c576040519150601f19603f3d011682016040523d82523d6000602084013e613f51565b606091505b5091509150818190613fe15760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b83811015613fa6578181015183820152602001613f8e565b50505050905090810190601f168015613fd35780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b507ff77753fab406ecfff96d6ff2476c64a838fa9f6d37b1bf190f8546e395e3b6138787878460405180856001600160a01b03166001600160a01b031681526020018481526020018060200180602001838103835285818151815260200191508051906020019080838360005b8381101561406657818101518382015260200161404e565b50505050905090810190601f1680156140935780820380516001836020036101000a031916815260200191505b50838103825284518152845160209182019186019080838360005b838110156140c65781810151838201526020016140ae565b50505050905090810190601f1680156140f35780820380516001836020036101000a031916815260200191505b50965050505050505060405180910390a19695505050505050565b600a819055604080513381526020810183905281517f2a843f39f13315c4c1a9bc53a1a32162858f272f3b2d0c656f409431251b6768929181900390910190a150565b600061415e600154613a5a565b6001600160a01b031663b429afeb836040518263ffffffff1660e01b815260040180826001600160a01b03166001600160a01b0316815260200191505060206040518083038186803b158015613b1c57600080fd5b6000614242858560405160200180806339363c1d60e11b81525060040183815260200182805190602001908083835b602083106142015780518252601f1990920191602091820191016141e2565b6001836020036101000a0380198251168184511680821785525050505050509050019250505060405160208183030381529060405280519060200120614c56565b9050630b135d3f60e11b6142568285611107565b6001600160e01b031916146142a2576040805162461bcd60e51b815260206004820152600d60248201526c1cda59c81b9bdd081d985b1a59609a1b604482015290519081900360640190fd5b600e5485146142e4576040805162461bcd60e51b81526020600482015260096024820152687478207265706c617960b81b604482015290519081900360640190fd5b6142ec614403565b6142f68483614ca7565b7f1e67acdbe17d73f10c3c1cec8dba9c0bca6d8fcd7f326d2a00e6520026b215858483604051808060200183151515158152602001828103825284818151815260200191508051906020019080838360005b83811015614360578181015183820152602001614348565b50505050905090810190601f16801561438d5780820380516001836020036101000a031916815260200191505b50935050505060405180910390a15050505050565b6000828201838110156143fc576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b9392505050565b600e80546001019081905560408051338152602081019290925280517fab0423a75986556234aecd171c46ce7f5e45607d8070bf5230f2735b50322bff9281900390910190a1565b6001600160a01b038216614495576040516001600160a01b0384169082156108fc029083906000818181858888f1935050505015801561448f573d6000803e3d6000fd5b50613c61565b613c616001600160a01b038316848363ffffffff614daa16565b600082821115614506576040805162461bcd60e51b815260206004820152601e60248201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604482015290519081900360640190fd5b50900390565b6000614519600954613a5a565b6001600160a01b031663e9cbd8226040518163ffffffff1660e01b815260040160206040518083038186803b15801561455157600080fd5b505afa158015614565573d6000803e3d6000fd5b505050506040513d602081101561457b57600080fd5b5051905090565b6060600080600080600080614598600954613a5a565b6001600160a01b0316631f69565f896040518263ffffffff1660e01b815260040180826001600160a01b03166001600160a01b0316815260200191505060006040518083038186803b1580156145ed57600080fd5b505afa158015614601573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405260e081101561462a57600080fd5b8101908080516040519392919084600160201b82111561464957600080fd5b90830190602082018581111561465e57600080fd5b8251600160201b81118282018810171561467757600080fd5b82525081516020918201929091019080838360005b838110156146a457818101518382015260200161468c565b50505050905090810190601f1680156146d15780820380516001836020036101000a031916815260200191505b5060409081526020820151908201516060830151608084015160a085015160c090950151979e50929c50909a509850965094509192505050919395979092949650565b6000826147235750600061116f565b8282028284828161473057fe5b04146143fc5760405162461bcd60e51b8152600401808060200182810382526021815260200180614f466021913960400191505060405180910390fd5b60008082116147c3576040805162461bcd60e51b815260206004820152601a60248201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604482015290519081900360640190fd5b60008284816147ce57fe5b04949350505050565b60606000806000806000806147ed600954613a5a565b6001600160a01b0316633efec5e96040518163ffffffff1660e01b815260040160006040518083038186803b15801561482557600080fd5b505afa158015614839573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405260e081101561486257600080fd5b8101908080516040519392919084600160201b82111561488157600080fd5b90830190602082018581111561489657600080fd5b8251600160201b8111828201881017156148af57600080fd5b82525081516020918201929091019080838360005b838110156148dc5781810151838201526020016148c4565b50505050905090810190601f1680156149095780820380516001836020036101000a031916815260200191505b5060409081526020820151908201516060830151608084015160a085015160c090950151979f939e50919c509a5098509096509294509192505050565b600d5442111561276c57614963426201518063ffffffff6143a216565b600d55600a54600b55565b614980826001600160a01b0316614b2c565b6149d1576040805162461bcd60e51b815260206004820152601f60248201527f5361666545524332303a2063616c6c20746f206e6f6e2d636f6e747261637400604482015290519081900360640190fd5b60006060836001600160a01b0316836040518082805190602001908083835b60208310614a0f5780518252601f1990920191602091820191016149f0565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d8060008114614a71576040519150601f19603f3d011682016040523d82523d6000602084013e614a76565b606091505b509150915081614acd576040805162461bcd60e51b815260206004820181905260248201527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564604482015290519081900360640190fd5b805115614b2657808060200190516020811015614ae957600080fd5b5051614b265760405162461bcd60e51b815260040180806020018281038252602a815260200180614faa602a913960400191505060405180910390fd5b50505050565b3b151590565b600080614b3e83614582565b509198975050505050505050565b600080614b5a600954613a5a565b6001600160a01b031663afc72e9385856040518363ffffffff1660e01b815260040180836001600160a01b03166001600160a01b0316815260200180602001828103825283818151815260200191508051906020019080838360005b83811015614bce578181015183820152602001614bb6565b50505050905090810190601f168015614bfb5780820380516001836020036101000a031916815260200191505b509350505050604080518083038186803b158015614c1857600080fd5b505afa158015614c2c573d6000803e3d6000fd5b505050506040513d6040811015614c4257600080fd5b508051602090910151909590945092505050565b604080517f19457468657265756d205369676e6564204d6573736167653a0a333200000000602080830191909152603c8083019490945282518083039094018452605c909101909152815191012090565b8151602080820191906000808060605b86851015614d9f57614cd086605463ffffffff6144af16565b898601805160148201516034909201805193995060609190911c96509094509092509050614d156054614d09878563ffffffff6143a216565b9063ffffffff6143a216565b945086851115614d5c576040805162461bcd60e51b815260206004820152600d60248201526c6f7574206f6620626f756e647360981b604482015290519081900360640190fd5b81614d7257506040805160208101909152600081525b8715614d8b57614d858484836001613c66565b50614d9a565b614d988484836000613c66565b505b614cb7565b505050505050505050565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b179052613c6190849061496e565b50805460008255906000526020600020908101906118309190614e9d565b828054828255906000526020600020908101928215614e6d579160200282015b82811115614e6d5781546001600160a01b0319166001600160a01b03843516178255602090920191600190910190614e3a565b50614e79929150614eb7565b5090565b815481835581811115613c6157600083815260209020613c619181019083015b6113e091905b80821115614e795760008155600101614ea3565b6113e091905b80821115614e795780546001600160a01b0319168155600101614ebd56fe6c696d69742073686f756c642062652067726561746572207468616e2063757272656e74206f6e65636f6e6669726d65642f7375626d6974746564206c696d6974206d69736d6174636873656e646572206973206e6f74206120636f6e74726f6c6c6572000000000000536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f776f776e65722063616e6e6f742062652073657420746f207a65726f206164647265737373656e646572206973206e6f7420706572736f6e616c203246410000000000005361666545524332303a204552433230206f7065726174696f6e20646964206e6f7420737563636565646e6f6e2d6d61746368696e672070656e64696e672077686974656c69737420686173685361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f20746f206e6f6e2d7a65726f20616c6c6f77616e6365a265627a7a72315820b4c72351fc221e99c8fad09f5ef6013fb3ae4d1d97e868dbd5a7be9b29c6398864736f6c63430005110032a265627a7a72315820b95ca7e1e1c9e72c79322a8c280dce3910ed5f15d0dde2ae19f9be232def3a5464736f6c63430005110032"

// DeployWalletCache deploys a new Ethereum contract, binding an instance of WalletCache to it.
func DeployWalletCache(auth *bind.TransactOpts, backend bind.ContractBackend, _ens_ common.Address, _defaultDailyLimit_ *big.Int, _controllerNode_ [32]byte, _licenceNode_ [32]byte, _tokenWhitelistNode_ [32]byte, _walletDeployerNode_ [32]byte) (common.Address, *types.Transaction, *WalletCache, error) {
	parsed, err := abi.JSON(strings.NewReader(WalletCacheABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(WalletCacheBin), backend, _ens_, _defaultDailyLimit_, _controllerNode_, _licenceNode_, _tokenWhitelistNode_, _walletDeployerNode_)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &WalletCache{WalletCacheCaller: WalletCacheCaller{contract: contract}, WalletCacheTransactor: WalletCacheTransactor{contract: contract}, WalletCacheFilterer: WalletCacheFilterer{contract: contract}}, nil
}

// WalletCache is an auto generated Go binding around an Ethereum contract.
type WalletCache struct {
	WalletCacheCaller     // Read-only binding to the contract
	WalletCacheTransactor // Write-only binding to the contract
	WalletCacheFilterer   // Log filterer for contract events
}

// WalletCacheCaller is an auto generated read-only Go binding around an Ethereum contract.
type WalletCacheCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// WalletCacheTransactor is an auto generated write-only Go binding around an Ethereum contract.
type WalletCacheTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// WalletCacheFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type WalletCacheFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// WalletCacheSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type WalletCacheSession struct {
	Contract     *WalletCache      // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// WalletCacheCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type WalletCacheCallerSession struct {
	Contract *WalletCacheCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts      // Call options to use throughout this session
}

// WalletCacheTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type WalletCacheTransactorSession struct {
	Contract     *WalletCacheTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts      // Transaction auth options to use throughout this session
}

// WalletCacheRaw is an auto generated low-level Go binding around an Ethereum contract.
type WalletCacheRaw struct {
	Contract *WalletCache // Generic contract binding to access the raw methods on
}

// WalletCacheCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type WalletCacheCallerRaw struct {
	Contract *WalletCacheCaller // Generic read-only contract binding to access the raw methods on
}

// WalletCacheTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type WalletCacheTransactorRaw struct {
	Contract *WalletCacheTransactor // Generic write-only contract binding to access the raw methods on
}

// NewWalletCache creates a new instance of WalletCache, bound to a specific deployed contract.
func NewWalletCache(address common.Address, backend bind.ContractBackend) (*WalletCache, error) {
	contract, err := bindWalletCache(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &WalletCache{WalletCacheCaller: WalletCacheCaller{contract: contract}, WalletCacheTransactor: WalletCacheTransactor{contract: contract}, WalletCacheFilterer: WalletCacheFilterer{contract: contract}}, nil
}

// NewWalletCacheCaller creates a new read-only instance of WalletCache, bound to a specific deployed contract.
func NewWalletCacheCaller(address common.Address, caller bind.ContractCaller) (*WalletCacheCaller, error) {
	contract, err := bindWalletCache(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &WalletCacheCaller{contract: contract}, nil
}

// NewWalletCacheTransactor creates a new write-only instance of WalletCache, bound to a specific deployed contract.
func NewWalletCacheTransactor(address common.Address, transactor bind.ContractTransactor) (*WalletCacheTransactor, error) {
	contract, err := bindWalletCache(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &WalletCacheTransactor{contract: contract}, nil
}

// NewWalletCacheFilterer creates a new log filterer instance of WalletCache, bound to a specific deployed contract.
func NewWalletCacheFilterer(address common.Address, filterer bind.ContractFilterer) (*WalletCacheFilterer, error) {
	contract, err := bindWalletCache(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &WalletCacheFilterer{contract: contract}, nil
}

// bindWalletCache binds a generic wrapper to an already deployed contract.
func bindWalletCache(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(WalletCacheABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_WalletCache *WalletCacheRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _WalletCache.Contract.WalletCacheCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_WalletCache *WalletCacheRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _WalletCache.Contract.WalletCacheTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_WalletCache *WalletCacheRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _WalletCache.Contract.WalletCacheTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_WalletCache *WalletCacheCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _WalletCache.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_WalletCache *WalletCacheTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _WalletCache.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_WalletCache *WalletCacheTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _WalletCache.Contract.contract.Transact(opts, method, params...)
}

// CachedWallets is a free data retrieval call binding the contract method 0xfc6cabe7.
//
// Solidity: function cachedWallets(uint256 ) constant returns(address)
func (_WalletCache *WalletCacheCaller) CachedWallets(opts *bind.CallOpts, arg0 *big.Int) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _WalletCache.contract.Call(opts, out, "cachedWallets", arg0)
	return *ret0, err
}

// CachedWallets is a free data retrieval call binding the contract method 0xfc6cabe7.
//
// Solidity: function cachedWallets(uint256 ) constant returns(address)
func (_WalletCache *WalletCacheSession) CachedWallets(arg0 *big.Int) (common.Address, error) {
	return _WalletCache.Contract.CachedWallets(&_WalletCache.CallOpts, arg0)
}

// CachedWallets is a free data retrieval call binding the contract method 0xfc6cabe7.
//
// Solidity: function cachedWallets(uint256 ) constant returns(address)
func (_WalletCache *WalletCacheCallerSession) CachedWallets(arg0 *big.Int) (common.Address, error) {
	return _WalletCache.Contract.CachedWallets(&_WalletCache.CallOpts, arg0)
}

// CachedWalletsCount is a free data retrieval call binding the contract method 0x71b9076a.
//
// Solidity: function cachedWalletsCount() constant returns(uint256)
func (_WalletCache *WalletCacheCaller) CachedWalletsCount(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _WalletCache.contract.Call(opts, out, "cachedWalletsCount")
	return *ret0, err
}

// CachedWalletsCount is a free data retrieval call binding the contract method 0x71b9076a.
//
// Solidity: function cachedWalletsCount() constant returns(uint256)
func (_WalletCache *WalletCacheSession) CachedWalletsCount() (*big.Int, error) {
	return _WalletCache.Contract.CachedWalletsCount(&_WalletCache.CallOpts)
}

// CachedWalletsCount is a free data retrieval call binding the contract method 0x71b9076a.
//
// Solidity: function cachedWalletsCount() constant returns(uint256)
func (_WalletCache *WalletCacheCallerSession) CachedWalletsCount() (*big.Int, error) {
	return _WalletCache.Contract.CachedWalletsCount(&_WalletCache.CallOpts)
}

// ControllerNode is a free data retrieval call binding the contract method 0xe2b4ce97.
//
// Solidity: function controllerNode() constant returns(bytes32)
func (_WalletCache *WalletCacheCaller) ControllerNode(opts *bind.CallOpts) ([32]byte, error) {
	var (
		ret0 = new([32]byte)
	)
	out := ret0
	err := _WalletCache.contract.Call(opts, out, "controllerNode")
	return *ret0, err
}

// ControllerNode is a free data retrieval call binding the contract method 0xe2b4ce97.
//
// Solidity: function controllerNode() constant returns(bytes32)
func (_WalletCache *WalletCacheSession) ControllerNode() ([32]byte, error) {
	return _WalletCache.Contract.ControllerNode(&_WalletCache.CallOpts)
}

// ControllerNode is a free data retrieval call binding the contract method 0xe2b4ce97.
//
// Solidity: function controllerNode() constant returns(bytes32)
func (_WalletCache *WalletCacheCallerSession) ControllerNode() ([32]byte, error) {
	return _WalletCache.Contract.ControllerNode(&_WalletCache.CallOpts)
}

// DefaultDailyLimit is a free data retrieval call binding the contract method 0xc76b0888.
//
// Solidity: function defaultDailyLimit() constant returns(uint256)
func (_WalletCache *WalletCacheCaller) DefaultDailyLimit(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _WalletCache.contract.Call(opts, out, "defaultDailyLimit")
	return *ret0, err
}

// DefaultDailyLimit is a free data retrieval call binding the contract method 0xc76b0888.
//
// Solidity: function defaultDailyLimit() constant returns(uint256)
func (_WalletCache *WalletCacheSession) DefaultDailyLimit() (*big.Int, error) {
	return _WalletCache.Contract.DefaultDailyLimit(&_WalletCache.CallOpts)
}

// DefaultDailyLimit is a free data retrieval call binding the contract method 0xc76b0888.
//
// Solidity: function defaultDailyLimit() constant returns(uint256)
func (_WalletCache *WalletCacheCallerSession) DefaultDailyLimit() (*big.Int, error) {
	return _WalletCache.Contract.DefaultDailyLimit(&_WalletCache.CallOpts)
}

// Ens is a free data retrieval call binding the contract method 0x3f15457f.
//
// Solidity: function ens() constant returns(address)
func (_WalletCache *WalletCacheCaller) Ens(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _WalletCache.contract.Call(opts, out, "ens")
	return *ret0, err
}

// Ens is a free data retrieval call binding the contract method 0x3f15457f.
//
// Solidity: function ens() constant returns(address)
func (_WalletCache *WalletCacheSession) Ens() (common.Address, error) {
	return _WalletCache.Contract.Ens(&_WalletCache.CallOpts)
}

// Ens is a free data retrieval call binding the contract method 0x3f15457f.
//
// Solidity: function ens() constant returns(address)
func (_WalletCache *WalletCacheCallerSession) Ens() (common.Address, error) {
	return _WalletCache.Contract.Ens(&_WalletCache.CallOpts)
}

// EnsRegistry is a free data retrieval call binding the contract method 0x7d73b231.
//
// Solidity: function ensRegistry() constant returns(address)
func (_WalletCache *WalletCacheCaller) EnsRegistry(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _WalletCache.contract.Call(opts, out, "ensRegistry")
	return *ret0, err
}

// EnsRegistry is a free data retrieval call binding the contract method 0x7d73b231.
//
// Solidity: function ensRegistry() constant returns(address)
func (_WalletCache *WalletCacheSession) EnsRegistry() (common.Address, error) {
	return _WalletCache.Contract.EnsRegistry(&_WalletCache.CallOpts)
}

// EnsRegistry is a free data retrieval call binding the contract method 0x7d73b231.
//
// Solidity: function ensRegistry() constant returns(address)
func (_WalletCache *WalletCacheCallerSession) EnsRegistry() (common.Address, error) {
	return _WalletCache.Contract.EnsRegistry(&_WalletCache.CallOpts)
}

// LicenceNode is a free data retrieval call binding the contract method 0x747c31d6.
//
// Solidity: function licenceNode() constant returns(bytes32)
func (_WalletCache *WalletCacheCaller) LicenceNode(opts *bind.CallOpts) ([32]byte, error) {
	var (
		ret0 = new([32]byte)
	)
	out := ret0
	err := _WalletCache.contract.Call(opts, out, "licenceNode")
	return *ret0, err
}

// LicenceNode is a free data retrieval call binding the contract method 0x747c31d6.
//
// Solidity: function licenceNode() constant returns(bytes32)
func (_WalletCache *WalletCacheSession) LicenceNode() ([32]byte, error) {
	return _WalletCache.Contract.LicenceNode(&_WalletCache.CallOpts)
}

// LicenceNode is a free data retrieval call binding the contract method 0x747c31d6.
//
// Solidity: function licenceNode() constant returns(bytes32)
func (_WalletCache *WalletCacheCallerSession) LicenceNode() ([32]byte, error) {
	return _WalletCache.Contract.LicenceNode(&_WalletCache.CallOpts)
}

// TokenWhitelistNode is a free data retrieval call binding the contract method 0x877337b0.
//
// Solidity: function tokenWhitelistNode() constant returns(bytes32)
func (_WalletCache *WalletCacheCaller) TokenWhitelistNode(opts *bind.CallOpts) ([32]byte, error) {
	var (
		ret0 = new([32]byte)
	)
	out := ret0
	err := _WalletCache.contract.Call(opts, out, "tokenWhitelistNode")
	return *ret0, err
}

// TokenWhitelistNode is a free data retrieval call binding the contract method 0x877337b0.
//
// Solidity: function tokenWhitelistNode() constant returns(bytes32)
func (_WalletCache *WalletCacheSession) TokenWhitelistNode() ([32]byte, error) {
	return _WalletCache.Contract.TokenWhitelistNode(&_WalletCache.CallOpts)
}

// TokenWhitelistNode is a free data retrieval call binding the contract method 0x877337b0.
//
// Solidity: function tokenWhitelistNode() constant returns(bytes32)
func (_WalletCache *WalletCacheCallerSession) TokenWhitelistNode() ([32]byte, error) {
	return _WalletCache.Contract.TokenWhitelistNode(&_WalletCache.CallOpts)
}

// WalletDeployerNode is a free data retrieval call binding the contract method 0x87e8bed1.
//
// Solidity: function walletDeployerNode() constant returns(bytes32)
func (_WalletCache *WalletCacheCaller) WalletDeployerNode(opts *bind.CallOpts) ([32]byte, error) {
	var (
		ret0 = new([32]byte)
	)
	out := ret0
	err := _WalletCache.contract.Call(opts, out, "walletDeployerNode")
	return *ret0, err
}

// WalletDeployerNode is a free data retrieval call binding the contract method 0x87e8bed1.
//
// Solidity: function walletDeployerNode() constant returns(bytes32)
func (_WalletCache *WalletCacheSession) WalletDeployerNode() ([32]byte, error) {
	return _WalletCache.Contract.WalletDeployerNode(&_WalletCache.CallOpts)
}

// WalletDeployerNode is a free data retrieval call binding the contract method 0x87e8bed1.
//
// Solidity: function walletDeployerNode() constant returns(bytes32)
func (_WalletCache *WalletCacheCallerSession) WalletDeployerNode() ([32]byte, error) {
	return _WalletCache.Contract.WalletDeployerNode(&_WalletCache.CallOpts)
}

// CacheWallet is a paid mutator transaction binding the contract method 0x60dbc5de.
//
// Solidity: function cacheWallet() returns()
func (_WalletCache *WalletCacheTransactor) CacheWallet(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _WalletCache.contract.Transact(opts, "cacheWallet")
}

// CacheWallet is a paid mutator transaction binding the contract method 0x60dbc5de.
//
// Solidity: function cacheWallet() returns()
func (_WalletCache *WalletCacheSession) CacheWallet() (*types.Transaction, error) {
	return _WalletCache.Contract.CacheWallet(&_WalletCache.TransactOpts)
}

// CacheWallet is a paid mutator transaction binding the contract method 0x60dbc5de.
//
// Solidity: function cacheWallet() returns()
func (_WalletCache *WalletCacheTransactorSession) CacheWallet() (*types.Transaction, error) {
	return _WalletCache.Contract.CacheWallet(&_WalletCache.TransactOpts)
}

// WalletCachePop is a paid mutator transaction binding the contract method 0xa4570e51.
//
// Solidity: function walletCachePop() returns(address)
func (_WalletCache *WalletCacheTransactor) WalletCachePop(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _WalletCache.contract.Transact(opts, "walletCachePop")
}

// WalletCachePop is a paid mutator transaction binding the contract method 0xa4570e51.
//
// Solidity: function walletCachePop() returns(address)
func (_WalletCache *WalletCacheSession) WalletCachePop() (*types.Transaction, error) {
	return _WalletCache.Contract.WalletCachePop(&_WalletCache.TransactOpts)
}

// WalletCachePop is a paid mutator transaction binding the contract method 0xa4570e51.
//
// Solidity: function walletCachePop() returns(address)
func (_WalletCache *WalletCacheTransactorSession) WalletCachePop() (*types.Transaction, error) {
	return _WalletCache.Contract.WalletCachePop(&_WalletCache.TransactOpts)
}

// WalletCacheCachedWalletIterator is returned from FilterCachedWallet and is used to iterate over the raw logs and unpacked data for CachedWallet events raised by the WalletCache contract.
type WalletCacheCachedWalletIterator struct {
	Event *WalletCacheCachedWallet // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *WalletCacheCachedWalletIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(WalletCacheCachedWallet)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(WalletCacheCachedWallet)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *WalletCacheCachedWalletIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *WalletCacheCachedWalletIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// WalletCacheCachedWallet represents a CachedWallet event raised by the WalletCache contract.
type WalletCacheCachedWallet struct {
	Wallet common.Address
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterCachedWallet is a free log retrieval operation binding the contract event 0x9ede7876a6b2454072ceeaff4b6b4e6eaa5381db241b850f2a46034136fc2e6e.
//
// Solidity: event CachedWallet(address _wallet)
func (_WalletCache *WalletCacheFilterer) FilterCachedWallet(opts *bind.FilterOpts) (*WalletCacheCachedWalletIterator, error) {

	logs, sub, err := _WalletCache.contract.FilterLogs(opts, "CachedWallet")
	if err != nil {
		return nil, err
	}
	return &WalletCacheCachedWalletIterator{contract: _WalletCache.contract, event: "CachedWallet", logs: logs, sub: sub}, nil
}

// WatchCachedWallet is a free log subscription operation binding the contract event 0x9ede7876a6b2454072ceeaff4b6b4e6eaa5381db241b850f2a46034136fc2e6e.
//
// Solidity: event CachedWallet(address _wallet)
func (_WalletCache *WalletCacheFilterer) WatchCachedWallet(opts *bind.WatchOpts, sink chan<- *WalletCacheCachedWallet) (event.Subscription, error) {

	logs, sub, err := _WalletCache.contract.WatchLogs(opts, "CachedWallet")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(WalletCacheCachedWallet)
				if err := _WalletCache.contract.UnpackLog(event, "CachedWallet", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseCachedWallet is a log parse operation binding the contract event 0x9ede7876a6b2454072ceeaff4b6b4e6eaa5381db241b850f2a46034136fc2e6e.
//
// Solidity: event CachedWallet(address _wallet)
func (_WalletCache *WalletCacheFilterer) ParseCachedWallet(log types.Log) (*WalletCacheCachedWallet, error) {
	event := new(WalletCacheCachedWallet)
	if err := _WalletCache.contract.UnpackLog(event, "CachedWallet", log); err != nil {
		return nil, err
	}
	return event, nil
}
