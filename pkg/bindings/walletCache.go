// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package bindings

import (
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = abi.U256
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// WalletCacheABI is the input ABI used to generate the binding from.
const WalletCacheABI = "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_ens_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_defaultDailyLimit_\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_controllerNode_\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_licenceNode_\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_tokenWhitelistNode_\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_walletDeployerNode_\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contractWallet\",\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"CachedWallet\",\"type\":\"event\"},{\"constant\":false,\"inputs\":[],\"name\":\"cacheWallet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"cachedWallets\",\"outputs\":[{\"internalType\":\"contractWallet\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cachedWalletsCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"controllerNode\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"defaultDailyLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ensRegistry\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"licenceNode\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenWhitelistNode\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"walletCachePop\",\"outputs\":[{\"internalType\":\"contractWallet\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"walletDeployerNode\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]"

// WalletCacheBin is the compiled bytecode used for deploying new contracts.
var WalletCacheBin = "0x60806040527f7f2ce995617d2816b426c5c8698c5ec2952f7a34bb10f38326f74933d58936976001557fd0ff8bd67f6e25e4e4b010df582a36a0ee9b78e49afe6cc1cff5dd5a830403306002557fe84f90570f13fe09f288f2411ff9cf50da611ed0c7db7f73d48053ffc974d3966003557f1d0c0adbe6addd93659446311e0767a56b67d41ef38f0cb66dcf7560d28a5a386004553480156100a057600080fd5b5060405161542c38038061542c833981810160405260c08110156100c357600080fd5b508051602082015160408301516060840151608085015160a090950151600080546001600160a01b0319166001600160a01b03871617905593949293919290918380156101105760018190555b50600680546001600160a01b0319166001600160a01b0388161790556007859055821561013d5760028390555b81156101495760038290555b80156101555760048190555b5050505050506152c28061016a6000396000f3fe60806040523480156200001157600080fd5b5060043610620000b85760003560e01c8063877337b0116200007b578063877337b0146200011f57806387e8bed11462000129578063a4570e511462000133578063c76b0888146200013d578063e2b4ce971462000147578063fc6cabe7146200015157620000b8565b80633f15457f14620000bd57806360dbc5de14620000e357806371b9076a14620000ef578063747c31d6146200010b5780637d73b2311462000115575b600080fd5b620000c762000171565b604080516001600160a01b039092168252519081900360200190f35b620000ed62000180565b005b620000f9620002a5565b60408051918252519081900360200190f35b620000f9620002ab565b620000c7620002b1565b620000f9620002c0565b620000f9620002c6565b620000c7620002cc565b620000f9620003bb565b620000f9620003c1565b620000c7600480360360208110156200016957600080fd5b5035620003c7565b6006546001600160a01b031681565b60006200018f600454620003ef565b6006546003546001916001600160a01b031690620001ac620003c1565b600254600754604051620001c090620004e9565b6001600160a01b0397881681529515156020870152939095166040808601919091526060850192909252608084015260a083019390935260c082015290519081900360e001906000f0801580156200021c573d6000803e3d6000fd5b50600580546001810182556000919091527f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db00180546001600160a01b0383166001600160a01b0319909116811790915560408051918252519192507f9ede7876a6b2454072ceeaff4b6b4e6eaa5381db241b850f2a46034136fc2e6e919081900360200190a150565b60055490565b60025481565b6000546001600160a01b031690565b60035481565b60045481565b6000620002db600454620003ef565b6001600160a01b0316336001600160a01b03161462000341576040805162461bcd60e51b815260206004820152601d60248201527f6e6f742063616c6c65642062792077616c6c65742d6465706c6f796572000000604482015290519081900360640190fd5b6005546001111562000357576200035762000180565b600580546000919060001981019081106200036e57fe5b600091825260209091200154600580546001600160a01b03909216925090806200039457fe5b600082815260209020810160001990810180546001600160a01b0319169055019055905090565b60075481565b60015490565b60058181548110620003d557fe5b6000918252602090912001546001600160a01b0316905081565b6000805460408051630178b8bf60e01b81526004810185905290516001600160a01b0390921691630178b8bf91602480820192602092909190829003018186803b1580156200043d57600080fd5b505afa15801562000452573d6000803e3d6000fd5b505050506040513d60208110156200046957600080fd5b505160408051631d9dabef60e11b81526004810185905290516001600160a01b0390921691633b3b57de91602480820192602092909190829003018186803b158015620004b557600080fd5b505afa158015620004ca573d6000803e3d6000fd5b505050506040513d6020811015620004e157600080fd5b505192915050565b614d9680620004f88339019056fe60806040527f7f2ce995617d2816b426c5c8698c5ec2952f7a34bb10f38326f74933d58936976001553480156200003557600080fd5b5060405162004d9638038062004d96833981810160405260e08110156200005b57600080fd5b508051602082015160408301516060840151608085015160a086015160c090960151600080546001600160a01b0319166001600160a01b03861617905594959394929391929091908084808989878015620000b65760018190555b50600280546001600160a01b0319166001600160a01b0384161760ff60a01b1916600160a01b8315158102919091179182905560ff9104166200013057604080516001600160a01b038416815290517f808639ff9c8e4732d60b6c2330de498035416d229f27a77d259680895efec1229181900360200190a15b60408051600081526001600160a01b038416602082015281517f850b3df64837d7d518b45f5aa64d104652c3b80eb5b34a8e3d9eb666cb7cdea5929181900390910190a1505060085560006200018e6001600160e01b036200020216565b505050505091505060008111620001dc576040805162461bcd60e51b815260206004820152600d60248201526c37379039ba30b13632b1b7b4b760991b604482015290519081900360640190fd5b919091026009819055600a819055600b55505042600c55600e55506200047e9350505050565b6060600080600080600080620002206008546200038460201b60201c565b6001600160a01b0316633efec5e96040518163ffffffff1660e01b815260040160006040518083038186803b1580156200025957600080fd5b505afa1580156200026e573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405260e08110156200029857600080fd5b8101908080516040519392919084640100000000821115620002b957600080fd5b908301906020820185811115620002cf57600080fd5b8251640100000000811182820188101715620002ea57600080fd5b82525081516020918201929091019080838360005b8381101562000319578181015183820152602001620002ff565b50505050905090810190601f168015620003475780820380516001836020036101000a031916815260200191505b5060409081526020820151908201516060830151608084015160a085015160c090950151979f939e50919c509a5098509096509294509192505050565b6000805460408051630178b8bf60e01b81526004810185905290516001600160a01b0390921691630178b8bf91602480820192602092909190829003018186803b158015620003d257600080fd5b505afa158015620003e7573d6000803e3d6000fd5b505050506040513d6020811015620003fe57600080fd5b505160408051631d9dabef60e11b81526004810185905290516001600160a01b0390921691633b3b57de91602480820192602092909190829003018186803b1580156200044a57600080fd5b505afa1580156200045f573d6000803e3d6000fd5b505050506040513d60208110156200047657600080fd5b505192915050565b614908806200048e6000396000f3fe6080604052600436106102465760003560e01c80636c37a7e611610139578063be40ba79116100b6578063ce0b5bd51161007a578063ce0b5bd514610cd6578063d251fefc14610d00578063de212bf314610d2a578063e2b4ce9714610d3f578063f36febda14610d54578063f421764814610d8d57610246565b8063be40ba7914610b91578063beabacc814610ba6578063cbd2ac6814610be9578063cccdc55614610c13578063cd7958dd14610c2857610246565b8063877337b0116100fd578063877337b014610a665780638da5cb5b14610a7b57806390e690c714610a90578063aaf1fc6214610aa5578063b242e53414610b5657610246565b80636c37a7e614610966578063715018a614610990578063747c31d6146109a55780637d73b231146109ba5780637fd004fa146109eb57610246565b80633a43199f116101c757806346efe0ed1161018b57806346efe0ed146107c557806347b55a9d146108975780634d9aa248146108ac5780635adc02ab146108c15780636137d670146108eb57610246565b80633a43199f1461066d5780633b8252fa146106995780633f579f42146106c0578063458d07f21461078657806345b12efc146107b057610246565b806320c13b0b1161020e57806320c13b0b146104e05780632121dc75146105ab57806326d05ab2146105c0578063294f4025146105d557806332531c3c1461063a57610246565b806301ffc9a714610282578063100f23fd146102ca5780631127b57e146102f65780631626ba7e146103805780631aa21fba14610455575b6040805133815234602082015281517f88a5966d370b9919b20f3e2c13ff65706f196a4e32cc2c12bf57088f88525874929181900390910190a1005b34801561028e57600080fd5b506102b6600480360360208110156102a557600080fd5b50356001600160e01b031916610e08565b604080519115158252519081900360200190f35b3480156102d657600080fd5b506102f4600480360360208110156102ed57600080fd5b5035610e21565b005b34801561030257600080fd5b5061030b610fc6565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561034557818101518382015260200161032d565b50505050905090810190601f1680156103725780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561038c57600080fd5b50610438600480360360408110156103a357600080fd5b81359190810190604081016020820135600160201b8111156103c457600080fd5b8201836020820111156103d657600080fd5b803590602001918460018302840111600160201b831117156103f757600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550610fe7945050505050565b604080516001600160e01b03199092168252519081900360200190f35b34801561046157600080fd5b506102f46004803603604081101561047857600080fd5b6001600160a01b038235169190810190604081016020820135600160201b8111156104a257600080fd5b8201836020820111156104b457600080fd5b803590602001918460208302840111600160201b831117156104d557600080fd5b509092509050611055565b3480156104ec57600080fd5b506104386004803603604081101561050357600080fd5b810190602081018135600160201b81111561051d57600080fd5b82018360208201111561052f57600080fd5b803590602001918460018302840111600160201b8311171561055057600080fd5b919390929091602081019035600160201b81111561056d57600080fd5b82018360208201111561057f57600080fd5b803590602001918460018302840111600160201b831117156105a057600080fd5b5090925090506111db565b3480156105b757600080fd5b506102b66112b0565b3480156105cc57600080fd5b506102b66112c1565b3480156105e157600080fd5b506105ea6112ca565b60408051602080825283518183015283519192839290830191858101910280838360005b8381101561062657818101518382015260200161060e565b505050509050019250505060405180910390f35b34801561064657600080fd5b506102b66004803603602081101561065d57600080fd5b50356001600160a01b031661132c565b6102f46004803603604081101561068357600080fd5b506001600160a01b038135169060200135611341565b3480156106a557600080fd5b506106ae611577565b60408051918252519081900360200190f35b3480156106cc57600080fd5b5061030b600480360360608110156106e357600080fd5b6001600160a01b0382351691602081013591810190606081016040820135600160201b81111561071257600080fd5b82018360208201111561072457600080fd5b803590602001918460018302840111600160201b8311171561074557600080fd5b91908080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525092955061157d945050505050565b34801561079257600080fd5b506102f4600480360360208110156107a957600080fd5b5035611a64565b3480156107bc57600080fd5b506106ae611b49565b3480156107d157600080fd5b506102f4600480360360608110156107e857600080fd5b81359190810190604081016020820135600160201b81111561080957600080fd5b82018360208201111561081b57600080fd5b803590602001918460018302840111600160201b8311171561083c57600080fd5b919390929091602081019035600160201b81111561085957600080fd5b82018360208201111561086b57600080fd5b803590602001918460018302840111600160201b8311171561088c57600080fd5b509092509050611b7b565b3480156108a357600080fd5b506105ea611e9b565b3480156108b857600080fd5b506106ae611efb565b3480156108cd57600080fd5b506102f4600480360360208110156108e457600080fd5b5035611f01565b3480156108f757600080fd5b506102f46004803603602081101561090e57600080fd5b810190602081018135600160201b81111561092857600080fd5b82018360208201111561093a57600080fd5b803590602001918460208302840111600160201b8311171561095b57600080fd5b5090925090506121e0565b34801561097257600080fd5b506102f46004803603602081101561098957600080fd5b5035612406565b34801561099c57600080fd5b506102f46124e6565b3480156109b157600080fd5b506106ae6125e4565b3480156109c657600080fd5b506109cf6125ea565b604080516001600160a01b039092168252519081900360200190f35b3480156109f757600080fd5b506102f460048036036020811015610a0e57600080fd5b810190602081018135600160201b811115610a2857600080fd5b820183602082011115610a3a57600080fd5b803590602001918460208302840111600160201b83111715610a5b57600080fd5b5090925090506125f9565b348015610a7257600080fd5b506106ae61293b565b348015610a8757600080fd5b506109cf612941565b348015610a9c57600080fd5b506102f4612950565b348015610ab157600080fd5b506102f460048036036020811015610ac857600080fd5b810190602081018135600160201b811115610ae257600080fd5b820183602082011115610af457600080fd5b803590602001918460018302840111600160201b83111715610b1557600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295506129ad945050505050565b348015610b6257600080fd5b506102f460048036036040811015610b7957600080fd5b506001600160a01b0381351690602001351515612aea565b348015610b9d57600080fd5b506102b6612ca4565b348015610bb257600080fd5b506102f460048036036060811015610bc957600080fd5b506001600160a01b03813581169160208101359091169060400135612cb3565b348015610bf557600080fd5b506102f460048036036020811015610c0c57600080fd5b5035612e26565b348015610c1f57600080fd5b506106ae6131b2565b348015610c3457600080fd5b506106ae60048036036020811015610c4b57600080fd5b810190602081018135600160201b811115610c6557600080fd5b820183602082011115610c7757600080fd5b803590602001918460208302840111600160201b83111715610c9857600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295506131b8945050505050565b348015610ce257600080fd5b506102f460048036036020811015610cf957600080fd5b5035613212565b348015610d0c57600080fd5b506109cf60048036036020811015610d2357600080fd5b50356133bb565b348015610d3657600080fd5b506102b66133e2565b348015610d4b57600080fd5b506106ae6133f0565b348015610d6057600080fd5b506106ae60048036036040811015610d7757600080fd5b506001600160a01b0381351690602001356133f6565b348015610d9957600080fd5b506102f460048036036020811015610db057600080fd5b810190602081018135600160201b811115610dca57600080fd5b820183602082011115610ddc57600080fd5b803590602001918460208302840111600160201b83111715610dfd57600080fd5b50909250905061357f565b6001600160e01b031981166301ffc9a760e01b14919050565b610e2a336138d1565b80610e395750610e39336138e5565b610e83576040805162461bcd60e51b815260206004820152601660248201527537b7363c9037bbb732b93e3e31b7b73a3937b63632b960511b604482015290519081900360640190fd5b60075460ff16610ed2576040805162461bcd60e51b81526020600482015260156024820152743737903832b73234b7339039bab136b4b9b9b4b7b760591b604482015290519081900360640190fd5b610f356005805480602002602001604051908101604052809291908181526020018280548015610f2b57602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610f0d575b50505050506131b8565b8114610f725760405162461bcd60e51b815260040180806020018281038252602381526020018061487b6023913960400191505060405180910390fd5b610f7e6005600061470b565b6007805460ff19169055604080513381526020810183905281517f7794eff834d760583543e6e510e717a5e66d2c064e225f4db448343c3e66afcf929181900390910190a150565b60405180604001604052806005815260200164332e312e3160d81b81525081565b600080610ffa848463ffffffff61397916565b9050611005816138d1565b611043576040805162461bcd60e51b815260206004820152600a60248201526937b7363c9037bbb732b960b11b604482015290519081900360640190fd5b50630b135d3f60e11b90505b92915050565b61105e336138d1565b8061106857503330145b6110ac576040805162461bcd60e51b815260206004820152601060248201526f37b7363c9037bbb732b93e3e39b2b63360811b604482015290519081900360640190fd5b806110f5576040805162461bcd60e51b8152602060048201526014602482015273617373657420617272617920697320656d70747960601b604482015290519081900360640190fd5b60005b818110156111585760006111273085858581811061111257fe5b905060200201356001600160a01b0316613a67565b905061114f8585858581811061113957fe5b905060200201356001600160a01b031683612cb3565b506001016110f8565b507fd4f62f23021706247dcffea245d104ae7ddaec7f23acf3d11d7136d5de6a69ad83838360405180846001600160a01b03166001600160a01b03168152602001806020018281038252848482818152602001925060200280828437600083820152604051601f909101601f1916909201829003965090945050505050a1505050565b6000808585604051602001808383808284376040805191909301818103601f190182528084528151602092830120601f8b01839004830282018301909452898152929650630b135d3f60e11b95506112529450869350899150889081908401838280828437600092019190915250610fe792505050565b6001600160e01b0319161461129e576040805162461bcd60e51b815260206004820152600d60248201526c1cda59c81b9bdd081d985b1a59609a1b604482015290519081900360640190fd5b506320c13b0b60e01b95945050505050565b600254600160a01b900460ff165b90565b60075460ff1681565b6060600680548060200260200160405190810160405280929190818152602001828054801561132257602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311611304575b5050505050905090565b60036020526000908152604090205460ff1681565b61134a336138d1565b8061135457503330145b611398576040805162461bcd60e51b815260206004820152601060248201526f37b7363c9037bbb732b93e3e39b2b63360811b604482015290519081900360640190fd5b6113a182613b12565b6113e7576040805162461bcd60e51b8152602060048201526012602482015271746f6b656e206e6f74206c6f616461626c6560701b604482015290519081900360640190fd5b60006113f383836133f6565b90506113fe81613b2c565b600061140b600e54613b97565b90506001600160a01b038416156114b3576114366001600160a01b038516828563ffffffff613c5916565b806001600160a01b0316631b3c96b485856040518363ffffffff1660e01b815260040180836001600160a01b03166001600160a01b0316815260200182815260200192505050600060405180830381600087803b15801561149657600080fd5b505af11580156114aa573d6000803e3d6000fd5b5050505061152d565b806001600160a01b0316631b3c96b48486866040518463ffffffff1660e01b815260040180836001600160a01b03166001600160a01b03168152602001828152602001925050506000604051808303818588803b15801561151357600080fd5b505af1158015611527573d6000803e3d6000fd5b50505050505b604080516001600160a01b03861681526020810185905281517f5f65674bec9af81f71be68674135a0ea3f163fb91984e3893d06da9f6ea2ce8a929181900390910190a150505050565b600b5490565b6060611588336138d1565b8061159257503330145b6115d6576040805162461bcd60e51b815260206004820152601060248201526f37b7363c9037bbb732b93e3e39b2b63360811b604482015290519081900360640190fd5b6001600160a01b03841660009081526003602052604090205460ff166115ff576115ff83613b2c565b611611846001600160a01b0316613d71565b8015611621575061162184613d77565b15611800576000806116338685613d91565b6001600160a01b038216600090815260036020526040902054919350915060ff1661167157600061166487836133f6565b905061166f81613b2c565b505b61168a6001600160a01b0387168563ffffffff613e9b16565b604080516020808252818301909252606091602082018180388339019050509050600160f81b81601f815181106116bd57fe5b60200101906001600160f81b031916908160001a9053507ff77753fab406ecfff96d6ff2476c64a838fa9f6d37b1bf190f8546e395e3b6138787878460405180856001600160a01b03166001600160a01b031681526020018481526020018060200180602001838103835285818151815260200191508051906020019080838360005b83811015611758578181015183820152602001611740565b50505050905090810190601f1680156117855780820380516001836020036101000a031916815260200191505b50838103825284518152845160209182019186019080838360005b838110156117b85781810151838201526020016117a0565b50505050905090810190601f1680156117e55780820380516001836020036101000a031916815260200191505b50965050505050505060405180910390a19250611a5d915050565b60006060856001600160a01b031685856040518082805190602001908083835b6020831061183f5780518252601f199092019160209182019101611820565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d80600081146118a1576040519150601f19603f3d011682016040523d82523d6000602084013e6118a6565b606091505b50915091508181906119365760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b838110156118fb5781810151838201526020016118e3565b50505050905090810190601f1680156119285780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b507ff77753fab406ecfff96d6ff2476c64a838fa9f6d37b1bf190f8546e395e3b6138686868460405180856001600160a01b03166001600160a01b031681526020018481526020018060200180602001838103835285818151815260200191508051906020019080838360005b838110156119bb5781810151838201526020016119a3565b50505050905090810190601f1680156119e85780820380516001836020036101000a031916815260200191505b50838103825284518152845160209182019186019080838360005b83811015611a1b578181015183820152602001611a03565b50505050905090810190601f168015611a485780820380516001836020036101000a031916815260200191505b50965050505050505060405180910390a19150505b9392505050565b611a6d336138d1565b80611a7757503330145b611abb576040805162461bcd60e51b815260206004820152601060248201526f37b7363c9037bbb732b93e3e39b2b63360811b604482015290519081900360640190fd5b600b8190556009548111611b1257611ad281614059565b604080513381526020810183905281517f2a843f39f13315c4c1a9bc53a1a32162858f272f3b2d0c656f409431251b6768929181900390910190a1611b46565b6040805182815290517f065b9ade648867cf901516060dd7a78fad8ab1aec5eb80ee57acbb30badf86ec9181900360200190a15b50565b600c54600090611b62906201518063ffffffff61407916565b421115611b7257506009546112be565b50600a546112be565b611b84336138e5565b611bd2576040805162461bcd60e51b815260206004820152601a60248201527939b2b73232b91034b9903737ba10309031b7b73a3937b63632b960311b604482015290519081900360640190fd5b6000611c2386868660405160200180806339363c1d60e11b815250600401848152602001838380828437808301925050509350505050604051602081830303815290604052805190602001206140d3565b9050631626ba7e60e01b6001600160e01b031916611c778285858080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250610fe792505050565b6001600160e01b03191614611cc3576040805162461bcd60e51b815260206004820152600d60248201526c1cda59c81b9bdd081d985b1a59609a1b604482015290519081900360640190fd5b600d548614611d05576040805162461bcd60e51b81526020600482015260096024820152687478207265706c617960b81b604482015290519081900360640190fd5b611d0d614124565b60006060306001600160a01b03168787604051808383808284376040519201945060009350909150508083038183865af19150503d8060008114611d6d576040519150601f19603f3d011682016040523d82523d6000602084013e611d72565b606091505b5091509150818190611dc55760405162461bcd60e51b81526020600482018181528351602484015283519092839260449091019190850190808383600083156118fb5781810151838201526020016118e3565b507f823dbcf2b7b0f265871963ca65ac033f6b4c71e0d82cd123d2ff23d752dc21c187878360405180806020018060200183810383528686828181526020019250808284376000838201819052601f909101601f191690920185810384528651815286516020918201939188019250908190849084905b83811015611e54578181015183820152602001611e3c565b50505050905090810190601f168015611e815780820380516001836020036101000a031916815260200191505b509550505050505060405180910390a15050505050505050565b60606005805480602002602001604051908101604052809291908181526020018280548015611322576020028201919060005260206000209081546001600160a01b03168152600190910190602001808311611304575050505050905090565b60095490565b611f0a336138e5565b611f58576040805162461bcd60e51b815260206004820152601a60248201527939b2b73232b91034b9903737ba10309031b7b73a3937b63632b960311b604482015290519081900360640190fd5b60075460ff16611fa7576040805162461bcd60e51b81526020600482015260156024820152743737903832b73234b7339039bab136b4b9b9b4b7b760591b604482015290519081900360640190fd5b6120086005805480602002602001604051908101604052809291908181526020018280548015610f2b576020028201919060005260206000209081546001600160a01b03168152600190910190602001808311610f0d5750505050506131b8565b81146120455760405162461bcd60e51b815260040180806020018281038252602381526020018061487b6023913960400191505060405180910390fd5b60005b60055481101561212c57600360006005838154811061206357fe5b60009182526020808320909101546001600160a01b0316835282019290925260400190205460ff1661212457600160036000600584815481106120a257fe5b6000918252602080832091909101546001600160a01b031683528201929092526040019020805460ff19169115159190911790556005805460049190839081106120e857fe5b60009182526020808320909101548354600181018555938352912090910180546001600160a01b0319166001600160a01b039092169190911790555b600101612048565b507fb2f6cccee7a369e23e293c25aa19bef80af11eb26deba3ea0f2a02783f752e4a33600560405180836001600160a01b03166001600160a01b031681526020018060200182810382528381815481526020019150805480156121b857602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831161219a575b5050935050505060405180910390a16121d36005600061470b565b506007805460ff19169055565b6121e9336138d1565b806121f357503330145b612237576040805162461bcd60e51b815260206004820152601060248201526f37b7363c9037bbb732b93e3e39b2b63360811b604482015290519081900360640190fd5b60075460ff161580156122525750600754610100900460ff16155b6122a3576040805162461bcd60e51b815260206004820152601c60248201527f77686974656c6973742073756d62697373696f6e2070656e64696e6700000000604482015290519081900360640190fd5b60075462010000900460ff166122fc576040805162461bcd60e51b81526020600482015260196024820152781dda1a5d195b1a5cdd081b9bdd081a5b9a5d1a585b1a5e9959603a1b604482015290519081900360640190fd5b80612340576040805162461bcd60e51b815260206004820152600f60248201526e195b5c1d1e481dda1a5d195b1a5cdd608a1b604482015290519081900360640190fd5b61234c60068383614729565b506007805461ff00191661010017905560408051602080840282810182019093528382527ffbc0e5ca6c7e4858daf0fdb185ef5186203e74ec9c64737e93c0aeaec596e1d192859285926123bb928591859182918501908490808284376000920191909152506131b892505050565b60405180806020018381526020018281038252858582818152602001925060200280828437600083820152604051601f909101601f1916909201829003965090945050505050a15050565b61240f336138e5565b61245d576040805162461bcd60e51b815260206004820152601a60248201527939b2b73232b91034b9903737ba10309031b7b73a3937b63632b960311b604482015290519081900360640190fd5b80600b541461249d5760405162461bcd60e51b81526004018080602001828103825260228152602001806147eb6022913960400191505060405180910390fd5b6124a8600b54614059565b604080513381526020810183905281517f2a843f39f13315c4c1a9bc53a1a32162858f272f3b2d0c656f409431251b6768929181900390910190a150565b6124ef336138d1565b612539576040805162461bcd60e51b815260206004820152601660248201527539b2b73232b91034b9903737ba1030b71037bbb732b960511b604482015290519081900360640190fd5b600254600160a01b900460ff16612597576040805162461bcd60e51b815260206004820152601d60248201527f6f776e657273686970206973206e6f74207472616e7366657261626c65000000604482015290519081900360640190fd5b600280546001600160a01b0319169055604080516000808252602082015281517f850b3df64837d7d518b45f5aa64d104652c3b80eb5b34a8e3d9eb666cb7cdea5929181900390910190a1565b600e5490565b6000546001600160a01b031690565b612602336138d1565b8061260c57503330145b612650576040805162461bcd60e51b815260206004820152601060248201526f37b7363c9037bbb732b93e3e39b2b63360811b604482015290519081900360640190fd5b60075460ff1615801561266b5750600754610100900460ff16155b6126bc576040805162461bcd60e51b815260206004820152601c60248201527f77686974656c6973742073756d62697373696f6e2070656e64696e6700000000604482015290519081900360640190fd5b8181808060200260200160405190810160405280939291908181526020018383602002808284376000920182905250925050505b81518110156127d85761271582828151811061270857fe5b60200260200101516138d1565b15612760576040805162461bcd60e51b8152602060048201526016602482015275636f6e7461696e73206f776e6572206164647265737360501b604482015290519081900360640190fd5b60006001600160a01b031682828151811061277757fe5b60200260200101516001600160a01b031614156127d0576040805162461bcd60e51b8152602060048201526012602482015271636f6e7461696e732030206164647265737360701b604482015290519081900360640190fd5b6001016126f0565b5060075462010000900460ff16612832576040805162461bcd60e51b81526020600482015260196024820152781dda1a5d195b1a5cdd081b9bdd081a5b9a5d1a585b1a5e9959603a1b604482015290519081900360640190fd5b81612876576040805162461bcd60e51b815260206004820152600f60248201526e195b5c1d1e481dda1a5d195b1a5cdd608a1b604482015290519081900360640190fd5b61288260058484614729565b506007805460ff1916600117905560408051602080850282810182019093528482527f9c80b3b5f68b3e017766d59e8d09b34efe6462b05c398f35cab9e271d9bc3b9c92869286926128ef928591859182918501908490808284376000920191909152506131b892505050565b60405180806020018381526020018281038252858582818152602001925060200280828437600083820152604051601f909101601f1916909201829003965090945050505050a1505050565b60085490565b6002546001600160a01b031690565b612959336138d1565b6129a3576040805162461bcd60e51b815260206004820152601660248201527539b2b73232b91034b9903737ba1030b71037bbb732b960511b604482015290519081900360640190fd5b6129ab614124565b565b6129b6336138d1565b806129c057503330145b612a04576040805162461bcd60e51b815260206004820152601060248201526f37b7363c9037bbb732b93e3e39b2b63360811b604482015290519081900360640190fd5b8051602080820191906000808060605b86851015612ae057612a2d86605463ffffffff61416c16565b888601805160148201516034909201805193995060609190911c96509094509092509050612a726054612a66878563ffffffff61407916565b9063ffffffff61407916565b945086851115612ab9576040805162461bcd60e51b815260206004820152600d60248201526c6f7574206f6620626f756e647360981b604482015290519081900360640190fd5b81612acf57506040805160208101909152600081525b612ada84848361157d565b50612a14565b5050505050505050565b612af3336138d1565b612b3d576040805162461bcd60e51b815260206004820152601660248201527539b2b73232b91034b9903737ba1030b71037bbb732b960511b604482015290519081900360640190fd5b600254600160a01b900460ff16612b9b576040805162461bcd60e51b815260206004820152601d60248201527f6f776e657273686970206973206e6f74207472616e7366657261626c65000000604482015290519081900360640190fd5b6001600160a01b038216612be05760405162461bcd60e51b815260040180806020018281038252602381526020018061482e6023913960400191505060405180910390fd5b6002805460ff60a01b1916600160a01b8315150217905580612c3957604080516001600160a01b038416815290517f808639ff9c8e4732d60b6c2330de498035416d229f27a77d259680895efec1229181900360200190a15b600254604080516001600160a01b039283168152918416602083015280517f850b3df64837d7d518b45f5aa64d104652c3b80eb5b34a8e3d9eb666cb7cdea59281900390910190a150600280546001600160a01b0319166001600160a01b0392909216919091179055565b60075462010000900460ff1681565b612cbc336138d1565b80612cc657503330145b612d0a576040805162461bcd60e51b815260206004820152601060248201526f37b7363c9037bbb732b93e3e39b2b63360811b604482015290519081900360640190fd5b8080612d47576040805162461bcd60e51b8152602060048201526007602482015266076616c75653d360cc1b604482015290519081900360640190fd5b6001600160a01b038416612d92576040805162461bcd60e51b815260206004820152600d60248201526c064657374696e6174696f6e3d3609c1b604482015290519081900360640190fd5b6001600160a01b03841660009081526003602052604090205460ff16612dcb576000612dbe84846133f6565b9050612dc981613b2c565b505b612dd68484846141c9565b604080516001600160a01b0380871682528516602082015280820184905290517fd1ba4ac2e2a11b5101f6cb4d978f514a155b421e8ec396d2d9abaf0bb02917ee9181900360600190a150505050565b612e2f336138e5565b612e7d576040805162461bcd60e51b815260206004820152601a60248201527939b2b73232b91034b9903737ba10309031b7b73a3937b63632b960311b604482015290519081900360640190fd5b600754610100900460ff16612ed1576040805162461bcd60e51b81526020600482015260156024820152743737903832b73234b7339039bab136b4b9b9b4b7b760591b604482015290519081900360640190fd5b612f326006805480602002602001604051908101604052809291908181526020018280548015610f2b576020028201919060005260206000209081546001600160a01b03168152600190910190602001808311610f0d5750505050506131b8565b8114612f6f5760405162461bcd60e51b815260040180806020018281038252602381526020018061487b6023913960400191505060405180910390fd5b60005b6006548110156130fd576003600060068381548110612f8d57fe5b60009182526020808320909101546001600160a01b0316835282019290925260400190205460ff16156130f55760006003600060068481548110612fcd57fe5b6000918252602080832091909101546001600160a01b031683528201929092526040018120805460ff1916921515929092179091555b60045461301790600163ffffffff61416c16565b8110156130df576006828154811061302b57fe5b600091825260209091200154600480546001600160a01b03909216918390811061305157fe5b6000918252602090912001546001600160a01b031614156130d75760048054600019810190811061307e57fe5b600091825260209091200154600480546001600160a01b0390921691839081106130a457fe5b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b031602179055506130df565b600101613003565b5060048054906130f390600019830161478c565b505b600101612f72565b507fd218c430fa348f4ce67791021b6b89c0c3eacd4ead1d8f5b83c60038ec28249b33600660405180836001600160a01b03166001600160a01b0316815260200180602001828103825283818154815260200191508054801561318957602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831161316b575b5050935050505060405180910390a16131a46006600061470b565b506007805461ff0019169055565b600d5481565b60008160405160200180828051906020019060200280838360005b838110156131eb5781810151838201526020016131d3565b50505050905001915050604051602081830303815290604052805190602001209050919050565b61321b336138d1565b8061322a575061322a336138e5565b613274576040805162461bcd60e51b815260206004820152601660248201527537b7363c9037bbb732b93e3e31b7b73a3937b63632b960511b604482015290519081900360640190fd5b600754610100900460ff166132c8576040805162461bcd60e51b81526020600482015260156024820152743737903832b73234b7339039bab136b4b9b9b4b7b760591b604482015290519081900360640190fd5b6133296006805480602002602001604051908101604052809291908181526020018280548015610f2b576020028201919060005260206000209081546001600160a01b03168152600190910190602001808311610f0d5750505050506131b8565b81146133665760405162461bcd60e51b815260040180806020018281038252602381526020018061487b6023913960400191505060405180910390fd5b6133726006600061470b565b6007805461ff0019169055604080513381526020810183905281517f13c935eb475aa0f6e931fece83e2ac44569ce2d53460d29a6dedab40b965c8a3929181900390910190a150565b600481815481106133c857fe5b6000918252602090912001546001600160a01b0316905081565b600754610100900460ff1681565b60015490565b600061340061422d565b6001600160a01b0316836001600160a01b0316141561342057508061104f565b816001600160a01b038416156134bb57600080600061343e876142a3565b505050935093509350508061345a57600094505050505061104f565b81613495576040805162461bcd60e51b81526020600482015260066024820152650726174653d360d41b604482015290519081900360640190fd5b6134b5836134a9888563ffffffff61443516565b9063ffffffff61448e16565b93505050505b60008060006134c86144f8565b505050935093509350508061351a576040805162461bcd60e51b8152602060048201526013602482015272746f6b656e206e6f7420617661696c61626c6560681b604482015290519081900360640190fd5b81613560576040805162461bcd60e51b81526020600482015260116024820152700737461626c65636f696e20726174653d3607c1b604482015290519081900360640190fd5b613574826134a9868663ffffffff61443516565b979650505050505050565b613588336138d1565b8061359257503330145b6135d6576040805162461bcd60e51b815260206004820152601060248201526f37b7363c9037bbb732b93e3e39b2b63360811b604482015290519081900360640190fd5b8181808060200260200160405190810160405280939291908181526020018383602002808284376000920182905250925050505b81518110156136e55761362282828151811061270857fe5b1561366d576040805162461bcd60e51b8152602060048201526016602482015275636f6e7461696e73206f776e6572206164647265737360501b604482015290519081900360640190fd5b60006001600160a01b031682828151811061368457fe5b60200260200101516001600160a01b031614156136dd576040805162461bcd60e51b8152602060048201526012602482015271636f6e7461696e732030206164647265737360701b604482015290519081900360640190fd5b60010161360a565b5060075462010000900460ff161561373c576040805162461bcd60e51b81526020600482015260156024820152741dda1a5d195b1a5cdd081a5b9a5d1a585b1a5e9959605a1b604482015290519081900360640190fd5b60005b8281101561382d576003600085858481811061375757fe5b602090810292909201356001600160a01b03168352508101919091526040016000205460ff166138255760016003600086868581811061379357fe5b905060200201356001600160a01b03166001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a81548160ff02191690831515021790555060048484838181106137e857fe5b835460018101855560009485526020948590200180546001600160a01b0319166001600160a01b0395909202939093013593909316929092179055505b60010161373f565b506007805462ff0000191662010000179055604080513380825260208201838152600480549484018590527fb2f6cccee7a369e23e293c25aa19bef80af11eb26deba3ea0f2a02783f752e4a94929390929091906060830190849080156138bd57602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831161389f575b5050935050505060405180910390a1505050565b6002546001600160a01b0390811691161490565b60006138f2600154613b97565b6001600160a01b031663b429afeb836040518263ffffffff1660e01b815260040180826001600160a01b03166001600160a01b0316815260200191505060206040518083038186803b15801561394757600080fd5b505afa15801561395b573d6000803e3d6000fd5b505050506040513d602081101561397157600080fd5b505192915050565b6000815160411461398c5750600061104f565b60208201516040830151606084015160001a7f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08211156139d2576000935050505061104f565b8060ff16601b141580156139ea57508060ff16601c14155b156139fb576000935050505061104f565b6040805160008152602080820180845289905260ff8416828401526060820186905260808201859052915160019260a0808401939192601f1981019281900390910190855afa158015613a52573d6000803e3d6000fd5b5050604051601f190151979650505050505050565b60006001600160a01b03821615613b0157816001600160a01b03166370a08231846040518263ffffffff1660e01b815260040180826001600160a01b03166001600160a01b0316815260200191505060206040518083038186803b158015613ace57600080fd5b505afa158015613ae2573d6000803e3d6000fd5b505050506040513d6020811015613af857600080fd5b5051905061104f565b506001600160a01b0382163161104f565b600080613b1e836142a3565b509098975050505050505050565b613b34614667565b80600a541015613b7e576040805162461bcd60e51b815260206004820152601060248201526f185d985a5b18589b194f185b5bdd5b9d60821b604482015290519081900360640190fd5b600a54613b91908263ffffffff61416c16565b600a5550565b6000805460408051630178b8bf60e01b81526004810185905290516001600160a01b0390921691630178b8bf91602480820192602092909190829003018186803b158015613be457600080fd5b505afa158015613bf8573d6000803e3d6000fd5b505050506040513d6020811015613c0e57600080fd5b505160408051631d9dabef60e11b81526004810185905290516001600160a01b0390921691633b3b57de91602480820192602092909190829003018186803b15801561394757600080fd5b801580613cdf575060408051636eb1769f60e11b81523060048201526001600160a01b03848116602483015291519185169163dd62ed3e91604480820192602092909190829003018186803b158015613cb157600080fd5b505afa158015613cc5573d6000803e3d6000fd5b505050506040513d6020811015613cdb57600080fd5b5051155b613d1a5760405162461bcd60e51b815260040180806020018281038252603681526020018061489e6036913960400191505060405180910390fd5b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663095ea7b360e01b179052613d6c908490613e9b565b505050565b3b151590565b600080613d83836142a3565b509198975050505050505050565b600080613d9f600854613b97565b6001600160a01b031663afc72e9385856040518363ffffffff1660e01b815260040180836001600160a01b03166001600160a01b0316815260200180602001828103825283818151815260200191508051906020019080838360005b83811015613e13578181015183820152602001613dfb565b50505050905090810190601f168015613e405780820380516001836020036101000a031916815260200191505b509350505050604080518083038186803b158015613e5d57600080fd5b505afa158015613e71573d6000803e3d6000fd5b505050506040513d6040811015613e8757600080fd5b508051602090910151909590945092505050565b613ead826001600160a01b0316613d71565b613efe576040805162461bcd60e51b815260206004820152601f60248201527f5361666545524332303a2063616c6c20746f206e6f6e2d636f6e747261637400604482015290519081900360640190fd5b60006060836001600160a01b0316836040518082805190602001908083835b60208310613f3c5780518252601f199092019160209182019101613f1d565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d8060008114613f9e576040519150601f19603f3d011682016040523d82523d6000602084013e613fa3565b606091505b509150915081613ffa576040805162461bcd60e51b815260206004820181905260248201527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564604482015290519081900360640190fd5b8051156140535780806020019051602081101561401657600080fd5b50516140535760405162461bcd60e51b815260040180806020018281038252602a815260200180614851602a913960400191505060405180910390fd5b50505050565b614061614667565b6009819055600a54811015611b4657600954600a5550565b600082820183811015611a5d576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b604080517f19457468657265756d205369676e6564204d6573736167653a0a333200000000602080830191909152603c8083019490945282518083039094018452605c909101909152815191012090565b600d80546001019081905560408051338152602081019290925280517fab0423a75986556234aecd171c46ce7f5e45607d8070bf5230f2735b50322bff9281900390910190a1565b6000828211156141c3576040805162461bcd60e51b815260206004820152601e60248201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604482015290519081900360640190fd5b50900390565b6001600160a01b038216614213576040516001600160a01b0384169082156108fc029083906000818181858888f1935050505015801561420d573d6000803e3d6000fd5b50613d6c565b613d6c6001600160a01b038316848363ffffffff6146b916565b600061423a600854613b97565b6001600160a01b031663e9cbd8226040518163ffffffff1660e01b815260040160206040518083038186803b15801561427257600080fd5b505afa158015614286573d6000803e3d6000fd5b505050506040513d602081101561429c57600080fd5b5051905090565b60606000806000806000806142b9600854613b97565b6001600160a01b0316631f69565f896040518263ffffffff1660e01b815260040180826001600160a01b03166001600160a01b0316815260200191505060006040518083038186803b15801561430e57600080fd5b505afa158015614322573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405260e081101561434b57600080fd5b8101908080516040519392919084600160201b82111561436a57600080fd5b90830190602082018581111561437f57600080fd5b8251600160201b81118282018810171561439857600080fd5b82525081516020918201929091019080838360005b838110156143c55781810151838201526020016143ad565b50505050905090810190601f1680156143f25780820380516001836020036101000a031916815260200191505b5060409081526020820151908201516060830151608084015160a085015160c090950151979e50929c50909a509850965094509192505050919395979092949650565b6000826144445750600061104f565b8282028284828161445157fe5b0414611a5d5760405162461bcd60e51b815260040180806020018281038252602181526020018061480d6021913960400191505060405180910390fd5b60008082116144e4576040805162461bcd60e51b815260206004820152601a60248201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604482015290519081900360640190fd5b60008284816144ef57fe5b04949350505050565b606060008060008060008061450e600854613b97565b6001600160a01b0316633efec5e96040518163ffffffff1660e01b815260040160006040518083038186803b15801561454657600080fd5b505afa15801561455a573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405260e081101561458357600080fd5b8101908080516040519392919084600160201b8211156145a257600080fd5b9083019060208201858111156145b757600080fd5b8251600160201b8111828201881017156145d057600080fd5b82525081516020918201929091019080838360005b838110156145fd5781810151838201526020016145e5565b50505050905090810190601f16801561462a5780820380516001836020036101000a031916815260200191505b5060409081526020820151908201516060830151608084015160a085015160c090950151979f939e50919c509a5098509096509294509192505050565b600c5461467d906201518063ffffffff61407916565b4211156129ab5742600c55600954600a556040517f3d7a207e679f8f6d123b7fcfa7aecd265bda3184d0962094667a376c4eb7f33690600090a1565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b179052613d6c908490613e9b565b5080546000825590600052602060002090810190611b4691906147ac565b82805482825590600052602060002090810192821561477c579160200282015b8281111561477c5781546001600160a01b0319166001600160a01b03843516178255602090920191600190910190614749565b506147889291506147c6565b5090565b815481835581811115613d6c57600083815260209020613d6c9181019083015b6112be91905b8082111561478857600081556001016147b2565b6112be91905b808211156147885780546001600160a01b03191681556001016147cc56fe636f6e6669726d65642f7375626d6974746564206c696d6974206d69736d61746368536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f776f776e65722063616e6e6f742062652073657420746f207a65726f20616464726573735361666545524332303a204552433230206f7065726174696f6e20646964206e6f7420737563636565646e6f6e2d6d61746368696e672070656e64696e672077686974656c69737420686173685361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f20746f206e6f6e2d7a65726f20616c6c6f77616e6365a265627a7a723158205d8d3ec0ffcfd93af01773048dd5155f4dcd5b41f741dab1753ea674758bba5864736f6c63430005110032a265627a7a72315820f614c7ff888528c40d3c240c64b27edca078df9b34fdca01908d33ad1b50966464736f6c63430005110032"

// DeployWalletCache deploys a new Ethereum contract, binding an instance of WalletCache to it.
func DeployWalletCache(auth *bind.TransactOpts, backend bind.ContractBackend, _ens_ common.Address, _defaultDailyLimit_ *big.Int, _controllerNode_ [32]byte, _licenceNode_ [32]byte, _tokenWhitelistNode_ [32]byte, _walletDeployerNode_ [32]byte) (common.Address, *types.Transaction, *WalletCache, error) {
	parsed, err := abi.JSON(strings.NewReader(WalletCacheABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(WalletCacheBin), backend, _ens_, _defaultDailyLimit_, _controllerNode_, _licenceNode_, _tokenWhitelistNode_, _walletDeployerNode_)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &WalletCache{WalletCacheCaller: WalletCacheCaller{contract: contract}, WalletCacheTransactor: WalletCacheTransactor{contract: contract}, WalletCacheFilterer: WalletCacheFilterer{contract: contract}}, nil
}

// WalletCache is an auto generated Go binding around an Ethereum contract.
type WalletCache struct {
	WalletCacheCaller     // Read-only binding to the contract
	WalletCacheTransactor // Write-only binding to the contract
	WalletCacheFilterer   // Log filterer for contract events
}

// WalletCacheCaller is an auto generated read-only Go binding around an Ethereum contract.
type WalletCacheCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// WalletCacheTransactor is an auto generated write-only Go binding around an Ethereum contract.
type WalletCacheTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// WalletCacheFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type WalletCacheFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// WalletCacheSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type WalletCacheSession struct {
	Contract     *WalletCache      // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// WalletCacheCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type WalletCacheCallerSession struct {
	Contract *WalletCacheCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts      // Call options to use throughout this session
}

// WalletCacheTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type WalletCacheTransactorSession struct {
	Contract     *WalletCacheTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts      // Transaction auth options to use throughout this session
}

// WalletCacheRaw is an auto generated low-level Go binding around an Ethereum contract.
type WalletCacheRaw struct {
	Contract *WalletCache // Generic contract binding to access the raw methods on
}

// WalletCacheCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type WalletCacheCallerRaw struct {
	Contract *WalletCacheCaller // Generic read-only contract binding to access the raw methods on
}

// WalletCacheTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type WalletCacheTransactorRaw struct {
	Contract *WalletCacheTransactor // Generic write-only contract binding to access the raw methods on
}

// NewWalletCache creates a new instance of WalletCache, bound to a specific deployed contract.
func NewWalletCache(address common.Address, backend bind.ContractBackend) (*WalletCache, error) {
	contract, err := bindWalletCache(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &WalletCache{WalletCacheCaller: WalletCacheCaller{contract: contract}, WalletCacheTransactor: WalletCacheTransactor{contract: contract}, WalletCacheFilterer: WalletCacheFilterer{contract: contract}}, nil
}

// NewWalletCacheCaller creates a new read-only instance of WalletCache, bound to a specific deployed contract.
func NewWalletCacheCaller(address common.Address, caller bind.ContractCaller) (*WalletCacheCaller, error) {
	contract, err := bindWalletCache(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &WalletCacheCaller{contract: contract}, nil
}

// NewWalletCacheTransactor creates a new write-only instance of WalletCache, bound to a specific deployed contract.
func NewWalletCacheTransactor(address common.Address, transactor bind.ContractTransactor) (*WalletCacheTransactor, error) {
	contract, err := bindWalletCache(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &WalletCacheTransactor{contract: contract}, nil
}

// NewWalletCacheFilterer creates a new log filterer instance of WalletCache, bound to a specific deployed contract.
func NewWalletCacheFilterer(address common.Address, filterer bind.ContractFilterer) (*WalletCacheFilterer, error) {
	contract, err := bindWalletCache(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &WalletCacheFilterer{contract: contract}, nil
}

// bindWalletCache binds a generic wrapper to an already deployed contract.
func bindWalletCache(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(WalletCacheABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_WalletCache *WalletCacheRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _WalletCache.Contract.WalletCacheCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_WalletCache *WalletCacheRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _WalletCache.Contract.WalletCacheTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_WalletCache *WalletCacheRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _WalletCache.Contract.WalletCacheTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_WalletCache *WalletCacheCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _WalletCache.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_WalletCache *WalletCacheTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _WalletCache.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_WalletCache *WalletCacheTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _WalletCache.Contract.contract.Transact(opts, method, params...)
}

// CachedWallets is a free data retrieval call binding the contract method 0xfc6cabe7.
//
// Solidity: function cachedWallets(uint256 ) constant returns(address)
func (_WalletCache *WalletCacheCaller) CachedWallets(opts *bind.CallOpts, arg0 *big.Int) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _WalletCache.contract.Call(opts, out, "cachedWallets", arg0)
	return *ret0, err
}

// CachedWallets is a free data retrieval call binding the contract method 0xfc6cabe7.
//
// Solidity: function cachedWallets(uint256 ) constant returns(address)
func (_WalletCache *WalletCacheSession) CachedWallets(arg0 *big.Int) (common.Address, error) {
	return _WalletCache.Contract.CachedWallets(&_WalletCache.CallOpts, arg0)
}

// CachedWallets is a free data retrieval call binding the contract method 0xfc6cabe7.
//
// Solidity: function cachedWallets(uint256 ) constant returns(address)
func (_WalletCache *WalletCacheCallerSession) CachedWallets(arg0 *big.Int) (common.Address, error) {
	return _WalletCache.Contract.CachedWallets(&_WalletCache.CallOpts, arg0)
}

// CachedWalletsCount is a free data retrieval call binding the contract method 0x71b9076a.
//
// Solidity: function cachedWalletsCount() constant returns(uint256)
func (_WalletCache *WalletCacheCaller) CachedWalletsCount(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _WalletCache.contract.Call(opts, out, "cachedWalletsCount")
	return *ret0, err
}

// CachedWalletsCount is a free data retrieval call binding the contract method 0x71b9076a.
//
// Solidity: function cachedWalletsCount() constant returns(uint256)
func (_WalletCache *WalletCacheSession) CachedWalletsCount() (*big.Int, error) {
	return _WalletCache.Contract.CachedWalletsCount(&_WalletCache.CallOpts)
}

// CachedWalletsCount is a free data retrieval call binding the contract method 0x71b9076a.
//
// Solidity: function cachedWalletsCount() constant returns(uint256)
func (_WalletCache *WalletCacheCallerSession) CachedWalletsCount() (*big.Int, error) {
	return _WalletCache.Contract.CachedWalletsCount(&_WalletCache.CallOpts)
}

// ControllerNode is a free data retrieval call binding the contract method 0xe2b4ce97.
//
// Solidity: function controllerNode() constant returns(bytes32)
func (_WalletCache *WalletCacheCaller) ControllerNode(opts *bind.CallOpts) ([32]byte, error) {
	var (
		ret0 = new([32]byte)
	)
	out := ret0
	err := _WalletCache.contract.Call(opts, out, "controllerNode")
	return *ret0, err
}

// ControllerNode is a free data retrieval call binding the contract method 0xe2b4ce97.
//
// Solidity: function controllerNode() constant returns(bytes32)
func (_WalletCache *WalletCacheSession) ControllerNode() ([32]byte, error) {
	return _WalletCache.Contract.ControllerNode(&_WalletCache.CallOpts)
}

// ControllerNode is a free data retrieval call binding the contract method 0xe2b4ce97.
//
// Solidity: function controllerNode() constant returns(bytes32)
func (_WalletCache *WalletCacheCallerSession) ControllerNode() ([32]byte, error) {
	return _WalletCache.Contract.ControllerNode(&_WalletCache.CallOpts)
}

// DefaultDailyLimit is a free data retrieval call binding the contract method 0xc76b0888.
//
// Solidity: function defaultDailyLimit() constant returns(uint256)
func (_WalletCache *WalletCacheCaller) DefaultDailyLimit(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _WalletCache.contract.Call(opts, out, "defaultDailyLimit")
	return *ret0, err
}

// DefaultDailyLimit is a free data retrieval call binding the contract method 0xc76b0888.
//
// Solidity: function defaultDailyLimit() constant returns(uint256)
func (_WalletCache *WalletCacheSession) DefaultDailyLimit() (*big.Int, error) {
	return _WalletCache.Contract.DefaultDailyLimit(&_WalletCache.CallOpts)
}

// DefaultDailyLimit is a free data retrieval call binding the contract method 0xc76b0888.
//
// Solidity: function defaultDailyLimit() constant returns(uint256)
func (_WalletCache *WalletCacheCallerSession) DefaultDailyLimit() (*big.Int, error) {
	return _WalletCache.Contract.DefaultDailyLimit(&_WalletCache.CallOpts)
}

// Ens is a free data retrieval call binding the contract method 0x3f15457f.
//
// Solidity: function ens() constant returns(address)
func (_WalletCache *WalletCacheCaller) Ens(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _WalletCache.contract.Call(opts, out, "ens")
	return *ret0, err
}

// Ens is a free data retrieval call binding the contract method 0x3f15457f.
//
// Solidity: function ens() constant returns(address)
func (_WalletCache *WalletCacheSession) Ens() (common.Address, error) {
	return _WalletCache.Contract.Ens(&_WalletCache.CallOpts)
}

// Ens is a free data retrieval call binding the contract method 0x3f15457f.
//
// Solidity: function ens() constant returns(address)
func (_WalletCache *WalletCacheCallerSession) Ens() (common.Address, error) {
	return _WalletCache.Contract.Ens(&_WalletCache.CallOpts)
}

// EnsRegistry is a free data retrieval call binding the contract method 0x7d73b231.
//
// Solidity: function ensRegistry() constant returns(address)
func (_WalletCache *WalletCacheCaller) EnsRegistry(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _WalletCache.contract.Call(opts, out, "ensRegistry")
	return *ret0, err
}

// EnsRegistry is a free data retrieval call binding the contract method 0x7d73b231.
//
// Solidity: function ensRegistry() constant returns(address)
func (_WalletCache *WalletCacheSession) EnsRegistry() (common.Address, error) {
	return _WalletCache.Contract.EnsRegistry(&_WalletCache.CallOpts)
}

// EnsRegistry is a free data retrieval call binding the contract method 0x7d73b231.
//
// Solidity: function ensRegistry() constant returns(address)
func (_WalletCache *WalletCacheCallerSession) EnsRegistry() (common.Address, error) {
	return _WalletCache.Contract.EnsRegistry(&_WalletCache.CallOpts)
}

// LicenceNode is a free data retrieval call binding the contract method 0x747c31d6.
//
// Solidity: function licenceNode() constant returns(bytes32)
func (_WalletCache *WalletCacheCaller) LicenceNode(opts *bind.CallOpts) ([32]byte, error) {
	var (
		ret0 = new([32]byte)
	)
	out := ret0
	err := _WalletCache.contract.Call(opts, out, "licenceNode")
	return *ret0, err
}

// LicenceNode is a free data retrieval call binding the contract method 0x747c31d6.
//
// Solidity: function licenceNode() constant returns(bytes32)
func (_WalletCache *WalletCacheSession) LicenceNode() ([32]byte, error) {
	return _WalletCache.Contract.LicenceNode(&_WalletCache.CallOpts)
}

// LicenceNode is a free data retrieval call binding the contract method 0x747c31d6.
//
// Solidity: function licenceNode() constant returns(bytes32)
func (_WalletCache *WalletCacheCallerSession) LicenceNode() ([32]byte, error) {
	return _WalletCache.Contract.LicenceNode(&_WalletCache.CallOpts)
}

// TokenWhitelistNode is a free data retrieval call binding the contract method 0x877337b0.
//
// Solidity: function tokenWhitelistNode() constant returns(bytes32)
func (_WalletCache *WalletCacheCaller) TokenWhitelistNode(opts *bind.CallOpts) ([32]byte, error) {
	var (
		ret0 = new([32]byte)
	)
	out := ret0
	err := _WalletCache.contract.Call(opts, out, "tokenWhitelistNode")
	return *ret0, err
}

// TokenWhitelistNode is a free data retrieval call binding the contract method 0x877337b0.
//
// Solidity: function tokenWhitelistNode() constant returns(bytes32)
func (_WalletCache *WalletCacheSession) TokenWhitelistNode() ([32]byte, error) {
	return _WalletCache.Contract.TokenWhitelistNode(&_WalletCache.CallOpts)
}

// TokenWhitelistNode is a free data retrieval call binding the contract method 0x877337b0.
//
// Solidity: function tokenWhitelistNode() constant returns(bytes32)
func (_WalletCache *WalletCacheCallerSession) TokenWhitelistNode() ([32]byte, error) {
	return _WalletCache.Contract.TokenWhitelistNode(&_WalletCache.CallOpts)
}

// WalletDeployerNode is a free data retrieval call binding the contract method 0x87e8bed1.
//
// Solidity: function walletDeployerNode() constant returns(bytes32)
func (_WalletCache *WalletCacheCaller) WalletDeployerNode(opts *bind.CallOpts) ([32]byte, error) {
	var (
		ret0 = new([32]byte)
	)
	out := ret0
	err := _WalletCache.contract.Call(opts, out, "walletDeployerNode")
	return *ret0, err
}

// WalletDeployerNode is a free data retrieval call binding the contract method 0x87e8bed1.
//
// Solidity: function walletDeployerNode() constant returns(bytes32)
func (_WalletCache *WalletCacheSession) WalletDeployerNode() ([32]byte, error) {
	return _WalletCache.Contract.WalletDeployerNode(&_WalletCache.CallOpts)
}

// WalletDeployerNode is a free data retrieval call binding the contract method 0x87e8bed1.
//
// Solidity: function walletDeployerNode() constant returns(bytes32)
func (_WalletCache *WalletCacheCallerSession) WalletDeployerNode() ([32]byte, error) {
	return _WalletCache.Contract.WalletDeployerNode(&_WalletCache.CallOpts)
}

// CacheWallet is a paid mutator transaction binding the contract method 0x60dbc5de.
//
// Solidity: function cacheWallet() returns()
func (_WalletCache *WalletCacheTransactor) CacheWallet(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _WalletCache.contract.Transact(opts, "cacheWallet")
}

// CacheWallet is a paid mutator transaction binding the contract method 0x60dbc5de.
//
// Solidity: function cacheWallet() returns()
func (_WalletCache *WalletCacheSession) CacheWallet() (*types.Transaction, error) {
	return _WalletCache.Contract.CacheWallet(&_WalletCache.TransactOpts)
}

// CacheWallet is a paid mutator transaction binding the contract method 0x60dbc5de.
//
// Solidity: function cacheWallet() returns()
func (_WalletCache *WalletCacheTransactorSession) CacheWallet() (*types.Transaction, error) {
	return _WalletCache.Contract.CacheWallet(&_WalletCache.TransactOpts)
}

// WalletCachePop is a paid mutator transaction binding the contract method 0xa4570e51.
//
// Solidity: function walletCachePop() returns(address)
func (_WalletCache *WalletCacheTransactor) WalletCachePop(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _WalletCache.contract.Transact(opts, "walletCachePop")
}

// WalletCachePop is a paid mutator transaction binding the contract method 0xa4570e51.
//
// Solidity: function walletCachePop() returns(address)
func (_WalletCache *WalletCacheSession) WalletCachePop() (*types.Transaction, error) {
	return _WalletCache.Contract.WalletCachePop(&_WalletCache.TransactOpts)
}

// WalletCachePop is a paid mutator transaction binding the contract method 0xa4570e51.
//
// Solidity: function walletCachePop() returns(address)
func (_WalletCache *WalletCacheTransactorSession) WalletCachePop() (*types.Transaction, error) {
	return _WalletCache.Contract.WalletCachePop(&_WalletCache.TransactOpts)
}

// WalletCacheCachedWalletIterator is returned from FilterCachedWallet and is used to iterate over the raw logs and unpacked data for CachedWallet events raised by the WalletCache contract.
type WalletCacheCachedWalletIterator struct {
	Event *WalletCacheCachedWallet // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *WalletCacheCachedWalletIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(WalletCacheCachedWallet)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(WalletCacheCachedWallet)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *WalletCacheCachedWalletIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *WalletCacheCachedWalletIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// WalletCacheCachedWallet represents a CachedWallet event raised by the WalletCache contract.
type WalletCacheCachedWallet struct {
	Wallet common.Address
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterCachedWallet is a free log retrieval operation binding the contract event 0x9ede7876a6b2454072ceeaff4b6b4e6eaa5381db241b850f2a46034136fc2e6e.
//
// Solidity: event CachedWallet(address _wallet)
func (_WalletCache *WalletCacheFilterer) FilterCachedWallet(opts *bind.FilterOpts) (*WalletCacheCachedWalletIterator, error) {

	logs, sub, err := _WalletCache.contract.FilterLogs(opts, "CachedWallet")
	if err != nil {
		return nil, err
	}
	return &WalletCacheCachedWalletIterator{contract: _WalletCache.contract, event: "CachedWallet", logs: logs, sub: sub}, nil
}

// WatchCachedWallet is a free log subscription operation binding the contract event 0x9ede7876a6b2454072ceeaff4b6b4e6eaa5381db241b850f2a46034136fc2e6e.
//
// Solidity: event CachedWallet(address _wallet)
func (_WalletCache *WalletCacheFilterer) WatchCachedWallet(opts *bind.WatchOpts, sink chan<- *WalletCacheCachedWallet) (event.Subscription, error) {

	logs, sub, err := _WalletCache.contract.WatchLogs(opts, "CachedWallet")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(WalletCacheCachedWallet)
				if err := _WalletCache.contract.UnpackLog(event, "CachedWallet", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseCachedWallet is a log parse operation binding the contract event 0x9ede7876a6b2454072ceeaff4b6b4e6eaa5381db241b850f2a46034136fc2e6e.
//
// Solidity: event CachedWallet(address _wallet)
func (_WalletCache *WalletCacheFilterer) ParseCachedWallet(log types.Log) (*WalletCacheCachedWallet, error) {
	event := new(WalletCacheCachedWallet)
	if err := _WalletCache.contract.UnpackLog(event, "CachedWallet", log); err != nil {
		return nil, err
	}
	return event, nil
}
