// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package bindings

import (
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = abi.U256
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// WalletCacheABI is the input ABI used to generate the binding from.
const WalletCacheABI = "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_ens_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_defaultDailyLimit_\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_controllerNode_\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_licenceNode_\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_tokenWhitelistNode_\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_walletDeployerNode_\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contractWallet\",\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"CachedWallet\",\"type\":\"event\"},{\"constant\":false,\"inputs\":[],\"name\":\"cacheWallet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"cachedWallets\",\"outputs\":[{\"internalType\":\"contractWallet\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cachedWalletsCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"controllerNode\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"defaultDailyLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ensRegistry\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"licenceNode\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenWhitelistNode\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"walletCachePop\",\"outputs\":[{\"internalType\":\"contractWallet\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"walletDeployerNode\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]"

// WalletCacheBin is the compiled bytecode used for deploying new contracts.
var WalletCacheBin = "0x60806040527f7f2ce995617d2816b426c5c8698c5ec2952f7a34bb10f38326f74933d58936976001557fd0ff8bd67f6e25e4e4b010df582a36a0ee9b78e49afe6cc1cff5dd5a830403306002557fe84f90570f13fe09f288f2411ff9cf50da611ed0c7db7f73d48053ffc974d3966003557f1d0c0adbe6addd93659446311e0767a56b67d41ef38f0cb66dcf7560d28a5a386004553480156100a057600080fd5b50604051615376380380615376833981810160405260c08110156100c357600080fd5b508051602082015160408301516060840151608085015160a090950151600080546001600160a01b0319166001600160a01b03871617905593949293919290918380156101105760018190555b50600680546001600160a01b0319166001600160a01b0388161790556007859055821561013d5760028390555b81156101495760038290555b80156101555760048190555b50505050505061520c8061016a6000396000f3fe608060405234801561001057600080fd5b50600436106100a95760003560e01c8063877337b011610071578063877337b01461010657806387e8bed11461010e578063a4570e5114610116578063c76b08881461011e578063e2b4ce9714610126578063fc6cabe71461012e576100a9565b80633f15457f146100ae57806360dbc5de146100d257806371b9076a146100dc578063747c31d6146100f65780637d73b231146100fe575b600080fd5b6100b661014b565b604080516001600160a01b039092168252519081900360200190f35b6100da61015a565b005b6100e4610278565b60408051918252519081900360200190f35b6100e461027e565b6100b6610284565b6100e4610293565b6100e4610299565b6100b661029f565b6100e4610386565b6100e461038c565b6100b66004803603602081101561014457600080fd5b5035610392565b6006546001600160a01b031681565b60006101676004546103b9565b6006546003546001916001600160a01b03169061018261038c565b600254600754604051610194906104ad565b6001600160a01b0397881681529515156020870152939095166040808601919091526060850192909252608084015260a083019390935260c082015290519081900360e001906000f0801580156101ef573d6000803e3d6000fd5b50600580546001810182556000919091527f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db00180546001600160a01b0383166001600160a01b0319909116811790915560408051918252519192507f9ede7876a6b2454072ceeaff4b6b4e6eaa5381db241b850f2a46034136fc2e6e919081900360200190a150565b60055490565b60025481565b6000546001600160a01b031690565b60035481565b60045481565b60006102ac6004546103b9565b6001600160a01b0316336001600160a01b031614610311576040805162461bcd60e51b815260206004820152601d60248201527f6e6f742063616c6c65642062792077616c6c65742d6465706c6f796572000000604482015290519081900360640190fd5b600554600111156103245761032461015a565b6005805460009190600019810190811061033a57fe5b600091825260209091200154600580546001600160a01b039092169250908061035f57fe5b600082815260209020810160001990810180546001600160a01b0319169055019055905090565b60075481565b60015490565b6005818154811061039f57fe5b6000918252602090912001546001600160a01b0316905081565b6000805460408051630178b8bf60e01b81526004810185905290516001600160a01b0390921691630178b8bf91602480820192602092909190829003018186803b15801561040657600080fd5b505afa15801561041a573d6000803e3d6000fd5b505050506040513d602081101561043057600080fd5b505160408051631d9dabef60e11b81526004810185905290516001600160a01b0390921691633b3b57de91602480820192602092909190829003018186803b15801561047b57600080fd5b505afa15801561048f573d6000803e3d6000fd5b505050506040513d60208110156104a557600080fd5b505192915050565b614d1d806104bb8339019056fe60806040527f7f2ce995617d2816b426c5c8698c5ec2952f7a34bb10f38326f74933d58936976001553480156200003557600080fd5b5060405162004d1d38038062004d1d833981810160405260e08110156200005b57600080fd5b508051602082015160408301516060840151608085015160a086015160c090960151600080546001600160a01b0319166001600160a01b03861617905594959394929391929091908084808989878015620000b65760018190555b50600280546001600160a01b0319166001600160a01b0384161760ff60a01b1916600160a01b8315158102919091179182905560ff9104166200013057604080516001600160a01b038416815290517f808639ff9c8e4732d60b6c2330de498035416d229f27a77d259680895efec1229181900360200190a15b60408051600081526001600160a01b038416602082015281517f850b3df64837d7d518b45f5aa64d104652c3b80eb5b34a8e3d9eb666cb7cdea5929181900390910190a15050600855506009819055600a555042600c556000600b55600d805460ff19169055600f555050505050614b6f80620001ae6000396000f3fe6080604052600436106102675760003560e01c8063715018a611610144578063be40ba79116100b6578063ce0b5bd51161007a578063ce0b5bd514610d6f578063d251fefc14610d99578063de212bf314610dc3578063e2b4ce9714610dd8578063f36febda14610ded578063f421764814610e2657610267565b8063be40ba7914610c2a578063beabacc814610c3f578063cbd2ac6814610c82578063cccdc55614610cac578063cd7958dd14610cc157610267565b80638da5cb5b116101085780638da5cb5b14610ab157806390e690c714610ac6578063aaf1fc6214610adb578063b20d30a914610b8c578063b242e53414610bb6578063b87e21ef14610bf157610267565b8063715018a6146109c6578063747c31d6146109db5780637d73b231146109f05780637fd004fa14610a21578063877337b014610a9c57610267565b80633b8252fa116101dd57806347b55a9d116101a157806347b55a9d146108b85780634d9aa248146108cd5780635adc02ab146108e25780635b268bcc1461090c5780636137d670146109215780636c37a7e61461099c57610267565b80633b8252fa146106ba5780633f579f42146106e1578063458d07f2146107a757806345b12efc146107d157806346efe0ed146107e657610267565b806320c13b0b1161022f57806320c13b0b146105015780632121dc75146105cc57806326d05ab2146105e1578063294f4025146105f657806332531c3c1461065b5780633a43199f1461068e57610267565b806301ffc9a7146102a3578063100f23fd146102eb5780631127b57e146103175780631626ba7e146103a15780631aa21fba14610476575b6040805133815234602082015281517f88a5966d370b9919b20f3e2c13ff65706f196a4e32cc2c12bf57088f88525874929181900390910190a1005b3480156102af57600080fd5b506102d7600480360360208110156102c657600080fd5b50356001600160e01b031916610ea1565b604080519115158252519081900360200190f35b3480156102f757600080fd5b506103156004803603602081101561030e57600080fd5b5035610eba565b005b34801561032357600080fd5b5061032c61105f565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561036657818101518382015260200161034e565b50505050905090810190601f1680156103935780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156103ad57600080fd5b50610459600480360360408110156103c457600080fd5b81359190810190604081016020820135600160201b8111156103e557600080fd5b8201836020820111156103f757600080fd5b803590602001918460018302840111600160201b8311171561041857600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550611080945050505050565b604080516001600160e01b03199092168252519081900360200190f35b34801561048257600080fd5b506103156004803603604081101561049957600080fd5b6001600160a01b038235169190810190604081016020820135600160201b8111156104c357600080fd5b8201836020820111156104d557600080fd5b803590602001918460208302840111600160201b831117156104f657600080fd5b5090925090506110ee565b34801561050d57600080fd5b506104596004803603604081101561052457600080fd5b810190602081018135600160201b81111561053e57600080fd5b82018360208201111561055057600080fd5b803590602001918460018302840111600160201b8311171561057157600080fd5b919390929091602081019035600160201b81111561058e57600080fd5b8201836020820111156105a057600080fd5b803590602001918460018302840111600160201b831117156105c157600080fd5b509092509050611274565b3480156105d857600080fd5b506102d7611349565b3480156105ed57600080fd5b506102d761135a565b34801561060257600080fd5b5061060b611363565b60408051602080825283518183015283519192839290830191858101910280838360005b8381101561064757818101518382015260200161062f565b505050509050019250505060405180910390f35b34801561066757600080fd5b506102d76004803603602081101561067e57600080fd5b50356001600160a01b03166113c5565b610315600480360360408110156106a457600080fd5b506001600160a01b0381351690602001356113da565b3480156106c657600080fd5b506106cf611610565b60408051918252519081900360200190f35b3480156106ed57600080fd5b5061032c6004803603606081101561070457600080fd5b6001600160a01b0382351691602081013591810190606081016040820135600160201b81111561073357600080fd5b82018360208201111561074557600080fd5b803590602001918460018302840111600160201b8311171561076657600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550611616945050505050565b3480156107b357600080fd5b50610315600480360360208110156107ca57600080fd5b5035611afd565b3480156107dd57600080fd5b506106cf611be6565b3480156107f257600080fd5b506103156004803603606081101561080957600080fd5b81359190810190604081016020820135600160201b81111561082a57600080fd5b82018360208201111561083c57600080fd5b803590602001918460018302840111600160201b8311171561085d57600080fd5b919390929091602081019035600160201b81111561087a57600080fd5b82018360208201111561088c57600080fd5b803590602001918460018302840111600160201b831117156108ad57600080fd5b509092509050611c18565b3480156108c457600080fd5b5061060b611f38565b3480156108d957600080fd5b506106cf611f98565b3480156108ee57600080fd5b506103156004803603602081101561090557600080fd5b5035611f9e565b34801561091857600080fd5b506102d761227d565b34801561092d57600080fd5b506103156004803603602081101561094457600080fd5b810190602081018135600160201b81111561095e57600080fd5b82018360208201111561097057600080fd5b803590602001918460208302840111600160201b8311171561099157600080fd5b509092509050612286565b3480156109a857600080fd5b50610315600480360360208110156109bf57600080fd5b50356124ac565b3480156109d257600080fd5b5061031561258c565b3480156109e757600080fd5b506106cf61268a565b3480156109fc57600080fd5b50610a05612690565b604080516001600160a01b039092168252519081900360200190f35b348015610a2d57600080fd5b5061031560048036036020811015610a4457600080fd5b810190602081018135600160201b811115610a5e57600080fd5b820183602082011115610a7057600080fd5b803590602001918460208302840111600160201b83111715610a9157600080fd5b50909250905061269f565b348015610aa857600080fd5b506106cf6129e1565b348015610abd57600080fd5b50610a056129e7565b348015610ad257600080fd5b506103156129f6565b348015610ae757600080fd5b5061031560048036036020811015610afe57600080fd5b810190602081018135600160201b811115610b1857600080fd5b820183602082011115610b2a57600080fd5b803590602001918460018302840111600160201b83111715610b4b57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550612a53945050505050565b348015610b9857600080fd5b5061031560048036036020811015610baf57600080fd5b5035612b90565b348015610bc257600080fd5b5061031560048036036040811015610bd957600080fd5b506001600160a01b0381351690602001351515612c87565b348015610bfd57600080fd5b506106cf60048036036040811015610c1457600080fd5b506001600160a01b038135169060200135612e41565b348015610c3657600080fd5b506102d7612ed1565b348015610c4b57600080fd5b5061031560048036036060811015610c6257600080fd5b506001600160a01b03813581169160208101359091169060400135612ee0565b348015610c8e57600080fd5b5061031560048036036020811015610ca557600080fd5b5035613062565b348015610cb857600080fd5b506106cf6133ee565b348015610ccd57600080fd5b506106cf60048036036020811015610ce457600080fd5b810190602081018135600160201b811115610cfe57600080fd5b820183602082011115610d1057600080fd5b803590602001918460208302840111600160201b83111715610d3157600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295506133f4945050505050565b348015610d7b57600080fd5b5061031560048036036020811015610d9257600080fd5b503561344e565b348015610da557600080fd5b50610a0560048036036020811015610dbc57600080fd5b50356135f7565b348015610dcf57600080fd5b506102d761361e565b348015610de457600080fd5b506106cf61362c565b348015610df957600080fd5b506106cf60048036036040811015610e1057600080fd5b506001600160a01b038135169060200135613632565b348015610e3257600080fd5b5061031560048036036020811015610e4957600080fd5b810190602081018135600160201b811115610e6357600080fd5b820183602082011115610e7557600080fd5b803590602001918460208302840111600160201b83111715610e9657600080fd5b5090925090506137e5565b6001600160e01b031981166301ffc9a760e01b14919050565b610ec333613b37565b80610ed25750610ed233613b4b565b610f1c576040805162461bcd60e51b815260206004820152601660248201527537b7363c9037bbb732b93e3e31b7b73a3937b63632b960511b604482015290519081900360640190fd5b60075460ff16610f6b576040805162461bcd60e51b81526020600482015260156024820152743737903832b73234b7339039bab136b4b9b9b4b7b760591b604482015290519081900360640190fd5b610fce6005805480602002602001604051908101604052809291908181526020018280548015610fc457602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610fa6575b50505050506133f4565b811461100b5760405162461bcd60e51b8152600401808060200182810382526023815260200180614ae26023913960400191505060405180910390fd5b61101760056000614972565b6007805460ff19169055604080513381526020810183905281517f7794eff834d760583543e6e510e717a5e66d2c064e225f4db448343c3e66afcf929181900390910190a150565b60405180604001604052806005815260200164332e312e3160d81b81525081565b600080611093848463ffffffff613bdf16565b905061109e81613b37565b6110dc576040805162461bcd60e51b815260206004820152600a60248201526937b7363c9037bbb732b960b11b604482015290519081900360640190fd5b50630b135d3f60e11b90505b92915050565b6110f733613b37565b8061110157503330145b611145576040805162461bcd60e51b815260206004820152601060248201526f37b7363c9037bbb732b93e3e39b2b63360811b604482015290519081900360640190fd5b8061118e576040805162461bcd60e51b8152602060048201526014602482015273617373657420617272617920697320656d70747960601b604482015290519081900360640190fd5b60005b818110156111f15760006111c0308585858181106111ab57fe5b905060200201356001600160a01b0316613ccd565b90506111e8858585858181106111d257fe5b905060200201356001600160a01b031683612ee0565b50600101611191565b507fd4f62f23021706247dcffea245d104ae7ddaec7f23acf3d11d7136d5de6a69ad83838360405180846001600160a01b03166001600160a01b03168152602001806020018281038252848482818152602001925060200280828437600083820152604051601f909101601f1916909201829003965090945050505050a1505050565b6000808585604051602001808383808284376040805191909301818103601f190182528084528151602092830120601f8b01839004830282018301909452898152929650630b135d3f60e11b95506112eb945086935089915088908190840183828082843760009201919091525061108092505050565b6001600160e01b03191614611337576040805162461bcd60e51b815260206004820152600d60248201526c1cda59c81b9bdd081d985b1a59609a1b604482015290519081900360640190fd5b506320c13b0b60e01b95945050505050565b600254600160a01b900460ff165b90565b60075460ff1681565b606060068054806020026020016040519081016040528092919081815260200182805480156113bb57602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831161139d575b5050505050905090565b60036020526000908152604090205460ff1681565b6113e333613b37565b806113ed57503330145b611431576040805162461bcd60e51b815260206004820152601060248201526f37b7363c9037bbb732b93e3e39b2b63360811b604482015290519081900360640190fd5b61143a82613d78565b611480576040805162461bcd60e51b8152602060048201526012602482015271746f6b656e206e6f74206c6f616461626c6560701b604482015290519081900360640190fd5b600061148c8383613632565b905061149781613d92565b60006114a4600f54613dfd565b90506001600160a01b0384161561154c576114cf6001600160a01b038516828563ffffffff613ebf16565b806001600160a01b0316631b3c96b485856040518363ffffffff1660e01b815260040180836001600160a01b03166001600160a01b0316815260200182815260200192505050600060405180830381600087803b15801561152f57600080fd5b505af1158015611543573d6000803e3d6000fd5b505050506115c6565b806001600160a01b0316631b3c96b48486866040518463ffffffff1660e01b815260040180836001600160a01b03166001600160a01b03168152602001828152602001925050506000604051808303818588803b1580156115ac57600080fd5b505af11580156115c0573d6000803e3d6000fd5b50505050505b604080516001600160a01b03861681526020810185905281517f5f65674bec9af81f71be68674135a0ea3f163fb91984e3893d06da9f6ea2ce8a929181900390910190a150505050565b600b5490565b606061162133613b37565b8061162b57503330145b61166f576040805162461bcd60e51b815260206004820152601060248201526f37b7363c9037bbb732b93e3e39b2b63360811b604482015290519081900360640190fd5b6001600160a01b03841660009081526003602052604090205460ff166116985761169883613d92565b6116aa846001600160a01b0316613fd7565b80156116ba57506116ba84613fdd565b15611899576000806116cc8685613ff7565b6001600160a01b038216600090815260036020526040902054919350915060ff1661170a5760006116fd8783612e41565b905061170881613d92565b505b6117236001600160a01b0387168563ffffffff61410116565b604080516020808252818301909252606091602082018180388339019050509050600160f81b81601f8151811061175657fe5b60200101906001600160f81b031916908160001a9053507ff77753fab406ecfff96d6ff2476c64a838fa9f6d37b1bf190f8546e395e3b6138787878460405180856001600160a01b03166001600160a01b031681526020018481526020018060200180602001838103835285818151815260200191508051906020019080838360005b838110156117f15781810151838201526020016117d9565b50505050905090810190601f16801561181e5780820380516001836020036101000a031916815260200191505b50838103825284518152845160209182019186019080838360005b83811015611851578181015183820152602001611839565b50505050905090810190601f16801561187e5780820380516001836020036101000a031916815260200191505b50965050505050505060405180910390a19250611af6915050565b60006060856001600160a01b031685856040518082805190602001908083835b602083106118d85780518252601f1990920191602091820191016118b9565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d806000811461193a576040519150601f19603f3d011682016040523d82523d6000602084013e61193f565b606091505b50915091508181906119cf5760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561199457818101518382015260200161197c565b50505050905090810190601f1680156119c15780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b507ff77753fab406ecfff96d6ff2476c64a838fa9f6d37b1bf190f8546e395e3b6138686868460405180856001600160a01b03166001600160a01b031681526020018481526020018060200180602001838103835285818151815260200191508051906020019080838360005b83811015611a54578181015183820152602001611a3c565b50505050905090810190601f168015611a815780820380516001836020036101000a031916815260200191505b50838103825284518152845160209182019186019080838360005b83811015611ab4578181015183820152602001611a9c565b50505050905090810190601f168015611ae15780820380516001836020036101000a031916815260200191505b50965050505050505060405180910390a19150505b9392505050565b611b0633613b37565b80611b1057503330145b611b54576040805162461bcd60e51b815260206004820152601060248201526f37b7363c9037bbb732b93e3e39b2b63360811b604482015290519081900360640190fd5b600d5460ff16611bab576040805162461bcd60e51b815260206004820152601a60248201527f6c696d697420686173206e746f206265656e2073657420796574000000000000604482015290519081900360640190fd5b600b8190556040805182815290517f065b9ade648867cf901516060dd7a78fad8ab1aec5eb80ee57acbb30badf86ec9181900360200190a150565b600c54600090611bff906201518063ffffffff6142bf16565b421115611c0f5750600954611357565b50600a54611357565b611c2133613b4b565b611c6f576040805162461bcd60e51b815260206004820152601a60248201527939b2b73232b91034b9903737ba10309031b7b73a3937b63632b960311b604482015290519081900360640190fd5b6000611cc086868660405160200180806339363c1d60e11b81525060040184815260200183838082843780830192505050935050505060405160208183030381529060405280519060200120614319565b9050631626ba7e60e01b6001600160e01b031916611d148285858080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061108092505050565b6001600160e01b03191614611d60576040805162461bcd60e51b815260206004820152600d60248201526c1cda59c81b9bdd081d985b1a59609a1b604482015290519081900360640190fd5b600e548614611da2576040805162461bcd60e51b81526020600482015260096024820152687478207265706c617960b81b604482015290519081900360640190fd5b611daa61436a565b60006060306001600160a01b03168787604051808383808284376040519201945060009350909150508083038183865af19150503d8060008114611e0a576040519150601f19603f3d011682016040523d82523d6000602084013e611e0f565b606091505b5091509150818190611e625760405162461bcd60e51b815260206004820181815283516024840152835190928392604490910191908501908083836000831561199457818101518382015260200161197c565b507f823dbcf2b7b0f265871963ca65ac033f6b4c71e0d82cd123d2ff23d752dc21c187878360405180806020018060200183810383528686828181526020019250808284376000838201819052601f909101601f191690920185810384528651815286516020918201939188019250908190849084905b83811015611ef1578181015183820152602001611ed9565b50505050905090810190601f168015611f1e5780820380516001836020036101000a031916815260200191505b509550505050505060405180910390a15050505050505050565b606060058054806020026020016040519081016040528092919081815260200182805480156113bb576020028201919060005260206000209081546001600160a01b0316815260019091019060200180831161139d575050505050905090565b60095490565b611fa733613b4b565b611ff5576040805162461bcd60e51b815260206004820152601a60248201527939b2b73232b91034b9903737ba10309031b7b73a3937b63632b960311b604482015290519081900360640190fd5b60075460ff16612044576040805162461bcd60e51b81526020600482015260156024820152743737903832b73234b7339039bab136b4b9b9b4b7b760591b604482015290519081900360640190fd5b6120a56005805480602002602001604051908101604052809291908181526020018280548015610fc4576020028201919060005260206000209081546001600160a01b03168152600190910190602001808311610fa65750505050506133f4565b81146120e25760405162461bcd60e51b8152600401808060200182810382526023815260200180614ae26023913960400191505060405180910390fd5b60005b6005548110156121c957600360006005838154811061210057fe5b60009182526020808320909101546001600160a01b0316835282019290925260400190205460ff166121c1576001600360006005848154811061213f57fe5b6000918252602080832091909101546001600160a01b031683528201929092526040019020805460ff191691151591909117905560058054600491908390811061218557fe5b60009182526020808320909101548354600181018555938352912090910180546001600160a01b0319166001600160a01b039092169190911790555b6001016120e5565b507fb2f6cccee7a369e23e293c25aa19bef80af11eb26deba3ea0f2a02783f752e4a33600560405180836001600160a01b03166001600160a01b0316815260200180602001828103825283818154815260200191508054801561225557602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311612237575b5050935050505060405180910390a161227060056000614972565b506007805460ff19169055565b600d5460ff1690565b61228f33613b37565b8061229957503330145b6122dd576040805162461bcd60e51b815260206004820152601060248201526f37b7363c9037bbb732b93e3e39b2b63360811b604482015290519081900360640190fd5b60075460ff161580156122f85750600754610100900460ff16155b612349576040805162461bcd60e51b815260206004820152601c60248201527f77686974656c6973742073756d62697373696f6e2070656e64696e6700000000604482015290519081900360640190fd5b60075462010000900460ff166123a2576040805162461bcd60e51b81526020600482015260196024820152781dda1a5d195b1a5cdd081b9bdd081a5b9a5d1a585b1a5e9959603a1b604482015290519081900360640190fd5b806123e6576040805162461bcd60e51b815260206004820152600f60248201526e195b5c1d1e481dda1a5d195b1a5cdd608a1b604482015290519081900360640190fd5b6123f260068383614990565b506007805461ff00191661010017905560408051602080840282810182019093528382527ffbc0e5ca6c7e4858daf0fdb185ef5186203e74ec9c64737e93c0aeaec596e1d19285928592612461928591859182918501908490808284376000920191909152506133f492505050565b60405180806020018381526020018281038252858582818152602001925060200280828437600083820152604051601f909101601f1916909201829003965090945050505050a15050565b6124b533613b4b565b612503576040805162461bcd60e51b815260206004820152601a60248201527939b2b73232b91034b9903737ba10309031b7b73a3937b63632b960311b604482015290519081900360640190fd5b80600b54146125435760405162461bcd60e51b8152600401808060200182810382526022815260200180614a526022913960400191505060405180910390fd5b61254e600b546143b2565b604080513381526020810183905281517f2a843f39f13315c4c1a9bc53a1a32162858f272f3b2d0c656f409431251b6768929181900390910190a150565b61259533613b37565b6125df576040805162461bcd60e51b815260206004820152601660248201527539b2b73232b91034b9903737ba1030b71037bbb732b960511b604482015290519081900360640190fd5b600254600160a01b900460ff1661263d576040805162461bcd60e51b815260206004820152601d60248201527f6f776e657273686970206973206e6f74207472616e7366657261626c65000000604482015290519081900360640190fd5b600280546001600160a01b0319169055604080516000808252602082015281517f850b3df64837d7d518b45f5aa64d104652c3b80eb5b34a8e3d9eb666cb7cdea5929181900390910190a1565b600f5490565b6000546001600160a01b031690565b6126a833613b37565b806126b257503330145b6126f6576040805162461bcd60e51b815260206004820152601060248201526f37b7363c9037bbb732b93e3e39b2b63360811b604482015290519081900360640190fd5b60075460ff161580156127115750600754610100900460ff16155b612762576040805162461bcd60e51b815260206004820152601c60248201527f77686974656c6973742073756d62697373696f6e2070656e64696e6700000000604482015290519081900360640190fd5b8181808060200260200160405190810160405280939291908181526020018383602002808284376000920182905250925050505b815181101561287e576127bb8282815181106127ae57fe5b6020026020010151613b37565b15612806576040805162461bcd60e51b8152602060048201526016602482015275636f6e7461696e73206f776e6572206164647265737360501b604482015290519081900360640190fd5b60006001600160a01b031682828151811061281d57fe5b60200260200101516001600160a01b03161415612876576040805162461bcd60e51b8152602060048201526012602482015271636f6e7461696e732030206164647265737360701b604482015290519081900360640190fd5b600101612796565b5060075462010000900460ff166128d8576040805162461bcd60e51b81526020600482015260196024820152781dda1a5d195b1a5cdd081b9bdd081a5b9a5d1a585b1a5e9959603a1b604482015290519081900360640190fd5b8161291c576040805162461bcd60e51b815260206004820152600f60248201526e195b5c1d1e481dda1a5d195b1a5cdd608a1b604482015290519081900360640190fd5b61292860058484614990565b506007805460ff1916600117905560408051602080850282810182019093528482527f9c80b3b5f68b3e017766d59e8d09b34efe6462b05c398f35cab9e271d9bc3b9c9286928692612995928591859182918501908490808284376000920191909152506133f492505050565b60405180806020018381526020018281038252858582818152602001925060200280828437600083820152604051601f909101601f1916909201829003965090945050505050a1505050565b60085490565b6002546001600160a01b031690565b6129ff33613b37565b612a49576040805162461bcd60e51b815260206004820152601660248201527539b2b73232b91034b9903737ba1030b71037bbb732b960511b604482015290519081900360640190fd5b612a5161436a565b565b612a5c33613b37565b80612a6657503330145b612aaa576040805162461bcd60e51b815260206004820152601060248201526f37b7363c9037bbb732b93e3e39b2b63360811b604482015290519081900360640190fd5b8051602080820191906000808060605b86851015612b8657612ad386605463ffffffff6143d316565b888601805160148201516034909201805193995060609190911c96509094509092509050612b186054612b0c878563ffffffff6142bf16565b9063ffffffff6142bf16565b945086851115612b5f576040805162461bcd60e51b815260206004820152600d60248201526c6f7574206f6620626f756e647360981b604482015290519081900360640190fd5b81612b7557506040805160208101909152600081525b612b80848483611616565b50612aba565b5050505050505050565b612b9933613b37565b80612ba357503330145b612be7576040805162461bcd60e51b815260206004820152601060248201526f37b7363c9037bbb732b93e3e39b2b63360811b604482015290519081900360640190fd5b600d5460ff1615612c33576040805162461bcd60e51b81526020600482015260116024820152701b1a5b5a5d08185b1c9958591e481cd95d607a1b604482015290519081900360640190fd5b612c3c816143b2565b600d805460ff19166001179055604080513381526020810183905281517f2a843f39f13315c4c1a9bc53a1a32162858f272f3b2d0c656f409431251b6768929181900390910190a150565b612c9033613b37565b612cda576040805162461bcd60e51b815260206004820152601660248201527539b2b73232b91034b9903737ba1030b71037bbb732b960511b604482015290519081900360640190fd5b600254600160a01b900460ff16612d38576040805162461bcd60e51b815260206004820152601d60248201527f6f776e657273686970206973206e6f74207472616e7366657261626c65000000604482015290519081900360640190fd5b6001600160a01b038216612d7d5760405162461bcd60e51b8152600401808060200182810382526023815260200180614a956023913960400191505060405180910390fd5b6002805460ff60a01b1916600160a01b8315150217905580612dd657604080516001600160a01b038416815290517f808639ff9c8e4732d60b6c2330de498035416d229f27a77d259680895efec1229181900360200190a15b600254604080516001600160a01b039283168152918416602083015280517f850b3df64837d7d518b45f5aa64d104652c3b80eb5b34a8e3d9eb666cb7cdea59281900390910190a150600280546001600160a01b0319166001600160a01b0392909216919091179055565b600080600080612e5086614430565b505050935093509350508015612ec55781612e9b576040805162461bcd60e51b81526020600482015260066024820152650726174653d360d41b604482015290519081900360640190fd5b612ebb83612eaf878563ffffffff6145c216565b9063ffffffff61461b16565b93505050506110e8565b50600095945050505050565b60075462010000900460ff1681565b612ee933613b37565b80612ef357503330145b612f37576040805162461bcd60e51b815260206004820152601060248201526f37b7363c9037bbb732b93e3e39b2b63360811b604482015290519081900360640190fd5b8080612f74576040805162461bcd60e51b8152602060048201526007602482015266076616c75653d360cc1b604482015290519081900360640190fd5b6001600160a01b038416612fbf576040805162461bcd60e51b815260206004820152600d60248201526c064657374696e6174696f6e3d3609c1b604482015290519081900360640190fd5b6001600160a01b03841660009081526003602052604090205460ff1661300757816001600160a01b03841615612ffc57612ff98484612e41565b90505b61300581613d92565b505b613012848484614685565b604080516001600160a01b0380871682528516602082015280820184905290517fd1ba4ac2e2a11b5101f6cb4d978f514a155b421e8ec396d2d9abaf0bb02917ee9181900360600190a150505050565b61306b33613b4b565b6130b9576040805162461bcd60e51b815260206004820152601a60248201527939b2b73232b91034b9903737ba10309031b7b73a3937b63632b960311b604482015290519081900360640190fd5b600754610100900460ff1661310d576040805162461bcd60e51b81526020600482015260156024820152743737903832b73234b7339039bab136b4b9b9b4b7b760591b604482015290519081900360640190fd5b61316e6006805480602002602001604051908101604052809291908181526020018280548015610fc4576020028201919060005260206000209081546001600160a01b03168152600190910190602001808311610fa65750505050506133f4565b81146131ab5760405162461bcd60e51b8152600401808060200182810382526023815260200180614ae26023913960400191505060405180910390fd5b60005b6006548110156133395760036000600683815481106131c957fe5b60009182526020808320909101546001600160a01b0316835282019290925260400190205460ff1615613331576000600360006006848154811061320957fe5b6000918252602080832091909101546001600160a01b031683528201929092526040018120805460ff1916921515929092179091555b60045461325390600163ffffffff6143d316565b81101561331b576006828154811061326757fe5b600091825260209091200154600480546001600160a01b03909216918390811061328d57fe5b6000918252602090912001546001600160a01b03161415613313576004805460001981019081106132ba57fe5b600091825260209091200154600480546001600160a01b0390921691839081106132e057fe5b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555061331b565b60010161323f565b50600480549061332f9060001983016149f3565b505b6001016131ae565b507fd218c430fa348f4ce67791021b6b89c0c3eacd4ead1d8f5b83c60038ec28249b33600660405180836001600160a01b03166001600160a01b031681526020018060200182810382528381815481526020019150805480156133c557602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116133a7575b5050935050505060405180910390a16133e060066000614972565b506007805461ff0019169055565b600e5481565b60008160405160200180828051906020019060200280838360005b8381101561342757818101518382015260200161340f565b50505050905001915050604051602081830303815290604052805190602001209050919050565b61345733613b37565b80613466575061346633613b4b565b6134b0576040805162461bcd60e51b815260206004820152601660248201527537b7363c9037bbb732b93e3e31b7b73a3937b63632b960511b604482015290519081900360640190fd5b600754610100900460ff16613504576040805162461bcd60e51b81526020600482015260156024820152743737903832b73234b7339039bab136b4b9b9b4b7b760591b604482015290519081900360640190fd5b6135656006805480602002602001604051908101604052809291908181526020018280548015610fc4576020028201919060005260206000209081546001600160a01b03168152600190910190602001808311610fa65750505050506133f4565b81146135a25760405162461bcd60e51b8152600401808060200182810382526023815260200180614ae26023913960400191505060405180910390fd5b6135ae60066000614972565b6007805461ff0019169055604080513381526020810183905281517f13c935eb475aa0f6e931fece83e2ac44569ce2d53460d29a6dedab40b965c8a3929181900390910190a150565b6004818154811061360457fe5b6000918252602090912001546001600160a01b0316905081565b600754610100900460ff1681565b60015490565b600061363c6146e9565b6001600160a01b0316836001600160a01b0316141561365c5750806110e8565b816001600160a01b0384161561372157600080600061367a87614430565b50505093509350935050806136cc576040805162461bcd60e51b8152602060048201526013602482015272746f6b656e206e6f7420617661696c61626c6560681b604482015290519081900360640190fd5b81613707576040805162461bcd60e51b81526020600482015260066024820152650726174653d360d41b604482015290519081900360640190fd5b61371b83612eaf888563ffffffff6145c216565b93505050505b600080600061372e61475f565b5050509350935093505080613780576040805162461bcd60e51b8152602060048201526013602482015272746f6b656e206e6f7420617661696c61626c6560681b604482015290519081900360640190fd5b816137c6576040805162461bcd60e51b81526020600482015260116024820152700737461626c65636f696e20726174653d3607c1b604482015290519081900360640190fd5b6137da82612eaf868663ffffffff6145c216565b979650505050505050565b6137ee33613b37565b806137f857503330145b61383c576040805162461bcd60e51b815260206004820152601060248201526f37b7363c9037bbb732b93e3e39b2b63360811b604482015290519081900360640190fd5b8181808060200260200160405190810160405280939291908181526020018383602002808284376000920182905250925050505b815181101561394b576138888282815181106127ae57fe5b156138d3576040805162461bcd60e51b8152602060048201526016602482015275636f6e7461696e73206f776e6572206164647265737360501b604482015290519081900360640190fd5b60006001600160a01b03168282815181106138ea57fe5b60200260200101516001600160a01b03161415613943576040805162461bcd60e51b8152602060048201526012602482015271636f6e7461696e732030206164647265737360701b604482015290519081900360640190fd5b600101613870565b5060075462010000900460ff16156139a2576040805162461bcd60e51b81526020600482015260156024820152741dda1a5d195b1a5cdd081a5b9a5d1a585b1a5e9959605a1b604482015290519081900360640190fd5b60005b82811015613a9357600360008585848181106139bd57fe5b602090810292909201356001600160a01b03168352508101919091526040016000205460ff16613a8b576001600360008686858181106139f957fe5b905060200201356001600160a01b03166001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a81548160ff0219169083151502179055506004848483818110613a4e57fe5b835460018101855560009485526020948590200180546001600160a01b0319166001600160a01b0395909202939093013593909316929092179055505b6001016139a5565b506007805462ff0000191662010000179055604080513380825260208201838152600480549484018590527fb2f6cccee7a369e23e293c25aa19bef80af11eb26deba3ea0f2a02783f752e4a9492939092909190606083019084908015613b2357602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311613b05575b5050935050505060405180910390a1505050565b6002546001600160a01b0390811691161490565b6000613b58600154613dfd565b6001600160a01b031663b429afeb836040518263ffffffff1660e01b815260040180826001600160a01b03166001600160a01b0316815260200191505060206040518083038186803b158015613bad57600080fd5b505afa158015613bc1573d6000803e3d6000fd5b505050506040513d6020811015613bd757600080fd5b505192915050565b60008151604114613bf2575060006110e8565b60208201516040830151606084015160001a7f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0821115613c3857600093505050506110e8565b8060ff16601b14158015613c5057508060ff16601c14155b15613c6157600093505050506110e8565b6040805160008152602080820180845289905260ff8416828401526060820186905260808201859052915160019260a0808401939192601f1981019281900390910190855afa158015613cb8573d6000803e3d6000fd5b5050604051601f190151979650505050505050565b60006001600160a01b03821615613d6757816001600160a01b03166370a08231846040518263ffffffff1660e01b815260040180826001600160a01b03166001600160a01b0316815260200191505060206040518083038186803b158015613d3457600080fd5b505afa158015613d48573d6000803e3d6000fd5b505050506040513d6020811015613d5e57600080fd5b505190506110e8565b506001600160a01b038216316110e8565b600080613d8483614430565b509098975050505050505050565b613d9a6148ce565b80600a541015613de4576040805162461bcd60e51b815260206004820152601060248201526f185d985a5b18589b194f185b5bdd5b9d60821b604482015290519081900360640190fd5b600a54613df7908263ffffffff6143d316565b600a5550565b6000805460408051630178b8bf60e01b81526004810185905290516001600160a01b0390921691630178b8bf91602480820192602092909190829003018186803b158015613e4a57600080fd5b505afa158015613e5e573d6000803e3d6000fd5b505050506040513d6020811015613e7457600080fd5b505160408051631d9dabef60e11b81526004810185905290516001600160a01b0390921691633b3b57de91602480820192602092909190829003018186803b158015613bad57600080fd5b801580613f45575060408051636eb1769f60e11b81523060048201526001600160a01b03848116602483015291519185169163dd62ed3e91604480820192602092909190829003018186803b158015613f1757600080fd5b505afa158015613f2b573d6000803e3d6000fd5b505050506040513d6020811015613f4157600080fd5b5051155b613f805760405162461bcd60e51b8152600401808060200182810382526036815260200180614b056036913960400191505060405180910390fd5b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663095ea7b360e01b179052613fd2908490614101565b505050565b3b151590565b600080613fe983614430565b509198975050505050505050565b600080614005600854613dfd565b6001600160a01b031663afc72e9385856040518363ffffffff1660e01b815260040180836001600160a01b03166001600160a01b0316815260200180602001828103825283818151815260200191508051906020019080838360005b83811015614079578181015183820152602001614061565b50505050905090810190601f1680156140a65780820380516001836020036101000a031916815260200191505b509350505050604080518083038186803b1580156140c357600080fd5b505afa1580156140d7573d6000803e3d6000fd5b505050506040513d60408110156140ed57600080fd5b508051602090910151909590945092505050565b614113826001600160a01b0316613fd7565b614164576040805162461bcd60e51b815260206004820152601f60248201527f5361666545524332303a2063616c6c20746f206e6f6e2d636f6e747261637400604482015290519081900360640190fd5b60006060836001600160a01b0316836040518082805190602001908083835b602083106141a25780518252601f199092019160209182019101614183565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d8060008114614204576040519150601f19603f3d011682016040523d82523d6000602084013e614209565b606091505b509150915081614260576040805162461bcd60e51b815260206004820181905260248201527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564604482015290519081900360640190fd5b8051156142b95780806020019051602081101561427c57600080fd5b50516142b95760405162461bcd60e51b815260040180806020018281038252602a815260200180614ab8602a913960400191505060405180910390fd5b50505050565b600082820183811015611af6576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b604080517f19457468657265756d205369676e6564204d6573736167653a0a333200000000602080830191909152603c8083019490945282518083039094018452605c909101909152815191012090565b600e80546001019081905560408051338152602081019290925280517fab0423a75986556234aecd171c46ce7f5e45607d8070bf5230f2735b50322bff9281900390910190a1565b6143ba6148ce565b6009819055600a548110156143d057600954600a555b50565b60008282111561442a576040805162461bcd60e51b815260206004820152601e60248201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604482015290519081900360640190fd5b50900390565b6060600080600080600080614446600854613dfd565b6001600160a01b0316631f69565f896040518263ffffffff1660e01b815260040180826001600160a01b03166001600160a01b0316815260200191505060006040518083038186803b15801561449b57600080fd5b505afa1580156144af573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405260e08110156144d857600080fd5b8101908080516040519392919084600160201b8211156144f757600080fd5b90830190602082018581111561450c57600080fd5b8251600160201b81118282018810171561452557600080fd5b82525081516020918201929091019080838360005b8381101561455257818101518382015260200161453a565b50505050905090810190601f16801561457f5780820380516001836020036101000a031916815260200191505b5060409081526020820151908201516060830151608084015160a085015160c090950151979e50929c50909a509850965094509192505050919395979092949650565b6000826145d1575060006110e8565b828202828482816145de57fe5b0414611af65760405162461bcd60e51b8152600401808060200182810382526021815260200180614a746021913960400191505060405180910390fd5b6000808211614671576040805162461bcd60e51b815260206004820152601a60248201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604482015290519081900360640190fd5b600082848161467c57fe5b04949350505050565b6001600160a01b0382166146cf576040516001600160a01b0384169082156108fc029083906000818181858888f193505050501580156146c9573d6000803e3d6000fd5b50613fd2565b613fd26001600160a01b038316848363ffffffff61492016565b60006146f6600854613dfd565b6001600160a01b031663e9cbd8226040518163ffffffff1660e01b815260040160206040518083038186803b15801561472e57600080fd5b505afa158015614742573d6000803e3d6000fd5b505050506040513d602081101561475857600080fd5b5051905090565b6060600080600080600080614775600854613dfd565b6001600160a01b0316633efec5e96040518163ffffffff1660e01b815260040160006040518083038186803b1580156147ad57600080fd5b505afa1580156147c1573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405260e08110156147ea57600080fd5b8101908080516040519392919084600160201b82111561480957600080fd5b90830190602082018581111561481e57600080fd5b8251600160201b81118282018810171561483757600080fd5b82525081516020918201929091019080838360005b8381101561486457818101518382015260200161484c565b50505050905090810190601f1680156148915780820380516001836020036101000a031916815260200191505b5060409081526020820151908201516060830151608084015160a085015160c090950151979f939e50919c509a5098509096509294509192505050565b600c546148e4906201518063ffffffff6142bf16565b421115612a515742600c55600954600a556040517f3d7a207e679f8f6d123b7fcfa7aecd265bda3184d0962094667a376c4eb7f33690600090a1565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b179052613fd2908490614101565b50805460008255906000526020600020908101906143d09190614a13565b8280548282559060005260206000209081019282156149e3579160200282015b828111156149e35781546001600160a01b0319166001600160a01b038435161782556020909201916001909101906149b0565b506149ef929150614a2d565b5090565b815481835581811115613fd257600083815260209020613fd29181019083015b61135791905b808211156149ef5760008155600101614a19565b61135791905b808211156149ef5780546001600160a01b0319168155600101614a3356fe636f6e6669726d65642f7375626d6974746564206c696d6974206d69736d61746368536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f776f776e65722063616e6e6f742062652073657420746f207a65726f20616464726573735361666545524332303a204552433230206f7065726174696f6e20646964206e6f7420737563636565646e6f6e2d6d61746368696e672070656e64696e672077686974656c69737420686173685361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f20746f206e6f6e2d7a65726f20616c6c6f77616e6365a265627a7a723158206daa15daaeddf6495cfe8200840ca948e832d70e787be974b2319be1dfc08c7d64736f6c63430005110032a265627a7a723158203c0d539530740097af755549564d0a458ef15e62d698b8ebec37a5bba502d64c64736f6c63430005110032"

// DeployWalletCache deploys a new Ethereum contract, binding an instance of WalletCache to it.
func DeployWalletCache(auth *bind.TransactOpts, backend bind.ContractBackend, _ens_ common.Address, _defaultDailyLimit_ *big.Int, _controllerNode_ [32]byte, _licenceNode_ [32]byte, _tokenWhitelistNode_ [32]byte, _walletDeployerNode_ [32]byte) (common.Address, *types.Transaction, *WalletCache, error) {
	parsed, err := abi.JSON(strings.NewReader(WalletCacheABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(WalletCacheBin), backend, _ens_, _defaultDailyLimit_, _controllerNode_, _licenceNode_, _tokenWhitelistNode_, _walletDeployerNode_)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &WalletCache{WalletCacheCaller: WalletCacheCaller{contract: contract}, WalletCacheTransactor: WalletCacheTransactor{contract: contract}, WalletCacheFilterer: WalletCacheFilterer{contract: contract}}, nil
}

// WalletCache is an auto generated Go binding around an Ethereum contract.
type WalletCache struct {
	WalletCacheCaller     // Read-only binding to the contract
	WalletCacheTransactor // Write-only binding to the contract
	WalletCacheFilterer   // Log filterer for contract events
}

// WalletCacheCaller is an auto generated read-only Go binding around an Ethereum contract.
type WalletCacheCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// WalletCacheTransactor is an auto generated write-only Go binding around an Ethereum contract.
type WalletCacheTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// WalletCacheFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type WalletCacheFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// WalletCacheSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type WalletCacheSession struct {
	Contract     *WalletCache      // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// WalletCacheCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type WalletCacheCallerSession struct {
	Contract *WalletCacheCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts      // Call options to use throughout this session
}

// WalletCacheTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type WalletCacheTransactorSession struct {
	Contract     *WalletCacheTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts      // Transaction auth options to use throughout this session
}

// WalletCacheRaw is an auto generated low-level Go binding around an Ethereum contract.
type WalletCacheRaw struct {
	Contract *WalletCache // Generic contract binding to access the raw methods on
}

// WalletCacheCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type WalletCacheCallerRaw struct {
	Contract *WalletCacheCaller // Generic read-only contract binding to access the raw methods on
}

// WalletCacheTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type WalletCacheTransactorRaw struct {
	Contract *WalletCacheTransactor // Generic write-only contract binding to access the raw methods on
}

// NewWalletCache creates a new instance of WalletCache, bound to a specific deployed contract.
func NewWalletCache(address common.Address, backend bind.ContractBackend) (*WalletCache, error) {
	contract, err := bindWalletCache(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &WalletCache{WalletCacheCaller: WalletCacheCaller{contract: contract}, WalletCacheTransactor: WalletCacheTransactor{contract: contract}, WalletCacheFilterer: WalletCacheFilterer{contract: contract}}, nil
}

// NewWalletCacheCaller creates a new read-only instance of WalletCache, bound to a specific deployed contract.
func NewWalletCacheCaller(address common.Address, caller bind.ContractCaller) (*WalletCacheCaller, error) {
	contract, err := bindWalletCache(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &WalletCacheCaller{contract: contract}, nil
}

// NewWalletCacheTransactor creates a new write-only instance of WalletCache, bound to a specific deployed contract.
func NewWalletCacheTransactor(address common.Address, transactor bind.ContractTransactor) (*WalletCacheTransactor, error) {
	contract, err := bindWalletCache(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &WalletCacheTransactor{contract: contract}, nil
}

// NewWalletCacheFilterer creates a new log filterer instance of WalletCache, bound to a specific deployed contract.
func NewWalletCacheFilterer(address common.Address, filterer bind.ContractFilterer) (*WalletCacheFilterer, error) {
	contract, err := bindWalletCache(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &WalletCacheFilterer{contract: contract}, nil
}

// bindWalletCache binds a generic wrapper to an already deployed contract.
func bindWalletCache(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(WalletCacheABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_WalletCache *WalletCacheRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _WalletCache.Contract.WalletCacheCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_WalletCache *WalletCacheRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _WalletCache.Contract.WalletCacheTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_WalletCache *WalletCacheRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _WalletCache.Contract.WalletCacheTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_WalletCache *WalletCacheCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _WalletCache.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_WalletCache *WalletCacheTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _WalletCache.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_WalletCache *WalletCacheTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _WalletCache.Contract.contract.Transact(opts, method, params...)
}

// CachedWallets is a free data retrieval call binding the contract method 0xfc6cabe7.
//
// Solidity: function cachedWallets(uint256 ) constant returns(address)
func (_WalletCache *WalletCacheCaller) CachedWallets(opts *bind.CallOpts, arg0 *big.Int) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _WalletCache.contract.Call(opts, out, "cachedWallets", arg0)
	return *ret0, err
}

// CachedWallets is a free data retrieval call binding the contract method 0xfc6cabe7.
//
// Solidity: function cachedWallets(uint256 ) constant returns(address)
func (_WalletCache *WalletCacheSession) CachedWallets(arg0 *big.Int) (common.Address, error) {
	return _WalletCache.Contract.CachedWallets(&_WalletCache.CallOpts, arg0)
}

// CachedWallets is a free data retrieval call binding the contract method 0xfc6cabe7.
//
// Solidity: function cachedWallets(uint256 ) constant returns(address)
func (_WalletCache *WalletCacheCallerSession) CachedWallets(arg0 *big.Int) (common.Address, error) {
	return _WalletCache.Contract.CachedWallets(&_WalletCache.CallOpts, arg0)
}

// CachedWalletsCount is a free data retrieval call binding the contract method 0x71b9076a.
//
// Solidity: function cachedWalletsCount() constant returns(uint256)
func (_WalletCache *WalletCacheCaller) CachedWalletsCount(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _WalletCache.contract.Call(opts, out, "cachedWalletsCount")
	return *ret0, err
}

// CachedWalletsCount is a free data retrieval call binding the contract method 0x71b9076a.
//
// Solidity: function cachedWalletsCount() constant returns(uint256)
func (_WalletCache *WalletCacheSession) CachedWalletsCount() (*big.Int, error) {
	return _WalletCache.Contract.CachedWalletsCount(&_WalletCache.CallOpts)
}

// CachedWalletsCount is a free data retrieval call binding the contract method 0x71b9076a.
//
// Solidity: function cachedWalletsCount() constant returns(uint256)
func (_WalletCache *WalletCacheCallerSession) CachedWalletsCount() (*big.Int, error) {
	return _WalletCache.Contract.CachedWalletsCount(&_WalletCache.CallOpts)
}

// ControllerNode is a free data retrieval call binding the contract method 0xe2b4ce97.
//
// Solidity: function controllerNode() constant returns(bytes32)
func (_WalletCache *WalletCacheCaller) ControllerNode(opts *bind.CallOpts) ([32]byte, error) {
	var (
		ret0 = new([32]byte)
	)
	out := ret0
	err := _WalletCache.contract.Call(opts, out, "controllerNode")
	return *ret0, err
}

// ControllerNode is a free data retrieval call binding the contract method 0xe2b4ce97.
//
// Solidity: function controllerNode() constant returns(bytes32)
func (_WalletCache *WalletCacheSession) ControllerNode() ([32]byte, error) {
	return _WalletCache.Contract.ControllerNode(&_WalletCache.CallOpts)
}

// ControllerNode is a free data retrieval call binding the contract method 0xe2b4ce97.
//
// Solidity: function controllerNode() constant returns(bytes32)
func (_WalletCache *WalletCacheCallerSession) ControllerNode() ([32]byte, error) {
	return _WalletCache.Contract.ControllerNode(&_WalletCache.CallOpts)
}

// DefaultDailyLimit is a free data retrieval call binding the contract method 0xc76b0888.
//
// Solidity: function defaultDailyLimit() constant returns(uint256)
func (_WalletCache *WalletCacheCaller) DefaultDailyLimit(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _WalletCache.contract.Call(opts, out, "defaultDailyLimit")
	return *ret0, err
}

// DefaultDailyLimit is a free data retrieval call binding the contract method 0xc76b0888.
//
// Solidity: function defaultDailyLimit() constant returns(uint256)
func (_WalletCache *WalletCacheSession) DefaultDailyLimit() (*big.Int, error) {
	return _WalletCache.Contract.DefaultDailyLimit(&_WalletCache.CallOpts)
}

// DefaultDailyLimit is a free data retrieval call binding the contract method 0xc76b0888.
//
// Solidity: function defaultDailyLimit() constant returns(uint256)
func (_WalletCache *WalletCacheCallerSession) DefaultDailyLimit() (*big.Int, error) {
	return _WalletCache.Contract.DefaultDailyLimit(&_WalletCache.CallOpts)
}

// Ens is a free data retrieval call binding the contract method 0x3f15457f.
//
// Solidity: function ens() constant returns(address)
func (_WalletCache *WalletCacheCaller) Ens(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _WalletCache.contract.Call(opts, out, "ens")
	return *ret0, err
}

// Ens is a free data retrieval call binding the contract method 0x3f15457f.
//
// Solidity: function ens() constant returns(address)
func (_WalletCache *WalletCacheSession) Ens() (common.Address, error) {
	return _WalletCache.Contract.Ens(&_WalletCache.CallOpts)
}

// Ens is a free data retrieval call binding the contract method 0x3f15457f.
//
// Solidity: function ens() constant returns(address)
func (_WalletCache *WalletCacheCallerSession) Ens() (common.Address, error) {
	return _WalletCache.Contract.Ens(&_WalletCache.CallOpts)
}

// EnsRegistry is a free data retrieval call binding the contract method 0x7d73b231.
//
// Solidity: function ensRegistry() constant returns(address)
func (_WalletCache *WalletCacheCaller) EnsRegistry(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _WalletCache.contract.Call(opts, out, "ensRegistry")
	return *ret0, err
}

// EnsRegistry is a free data retrieval call binding the contract method 0x7d73b231.
//
// Solidity: function ensRegistry() constant returns(address)
func (_WalletCache *WalletCacheSession) EnsRegistry() (common.Address, error) {
	return _WalletCache.Contract.EnsRegistry(&_WalletCache.CallOpts)
}

// EnsRegistry is a free data retrieval call binding the contract method 0x7d73b231.
//
// Solidity: function ensRegistry() constant returns(address)
func (_WalletCache *WalletCacheCallerSession) EnsRegistry() (common.Address, error) {
	return _WalletCache.Contract.EnsRegistry(&_WalletCache.CallOpts)
}

// LicenceNode is a free data retrieval call binding the contract method 0x747c31d6.
//
// Solidity: function licenceNode() constant returns(bytes32)
func (_WalletCache *WalletCacheCaller) LicenceNode(opts *bind.CallOpts) ([32]byte, error) {
	var (
		ret0 = new([32]byte)
	)
	out := ret0
	err := _WalletCache.contract.Call(opts, out, "licenceNode")
	return *ret0, err
}

// LicenceNode is a free data retrieval call binding the contract method 0x747c31d6.
//
// Solidity: function licenceNode() constant returns(bytes32)
func (_WalletCache *WalletCacheSession) LicenceNode() ([32]byte, error) {
	return _WalletCache.Contract.LicenceNode(&_WalletCache.CallOpts)
}

// LicenceNode is a free data retrieval call binding the contract method 0x747c31d6.
//
// Solidity: function licenceNode() constant returns(bytes32)
func (_WalletCache *WalletCacheCallerSession) LicenceNode() ([32]byte, error) {
	return _WalletCache.Contract.LicenceNode(&_WalletCache.CallOpts)
}

// TokenWhitelistNode is a free data retrieval call binding the contract method 0x877337b0.
//
// Solidity: function tokenWhitelistNode() constant returns(bytes32)
func (_WalletCache *WalletCacheCaller) TokenWhitelistNode(opts *bind.CallOpts) ([32]byte, error) {
	var (
		ret0 = new([32]byte)
	)
	out := ret0
	err := _WalletCache.contract.Call(opts, out, "tokenWhitelistNode")
	return *ret0, err
}

// TokenWhitelistNode is a free data retrieval call binding the contract method 0x877337b0.
//
// Solidity: function tokenWhitelistNode() constant returns(bytes32)
func (_WalletCache *WalletCacheSession) TokenWhitelistNode() ([32]byte, error) {
	return _WalletCache.Contract.TokenWhitelistNode(&_WalletCache.CallOpts)
}

// TokenWhitelistNode is a free data retrieval call binding the contract method 0x877337b0.
//
// Solidity: function tokenWhitelistNode() constant returns(bytes32)
func (_WalletCache *WalletCacheCallerSession) TokenWhitelistNode() ([32]byte, error) {
	return _WalletCache.Contract.TokenWhitelistNode(&_WalletCache.CallOpts)
}

// WalletDeployerNode is a free data retrieval call binding the contract method 0x87e8bed1.
//
// Solidity: function walletDeployerNode() constant returns(bytes32)
func (_WalletCache *WalletCacheCaller) WalletDeployerNode(opts *bind.CallOpts) ([32]byte, error) {
	var (
		ret0 = new([32]byte)
	)
	out := ret0
	err := _WalletCache.contract.Call(opts, out, "walletDeployerNode")
	return *ret0, err
}

// WalletDeployerNode is a free data retrieval call binding the contract method 0x87e8bed1.
//
// Solidity: function walletDeployerNode() constant returns(bytes32)
func (_WalletCache *WalletCacheSession) WalletDeployerNode() ([32]byte, error) {
	return _WalletCache.Contract.WalletDeployerNode(&_WalletCache.CallOpts)
}

// WalletDeployerNode is a free data retrieval call binding the contract method 0x87e8bed1.
//
// Solidity: function walletDeployerNode() constant returns(bytes32)
func (_WalletCache *WalletCacheCallerSession) WalletDeployerNode() ([32]byte, error) {
	return _WalletCache.Contract.WalletDeployerNode(&_WalletCache.CallOpts)
}

// CacheWallet is a paid mutator transaction binding the contract method 0x60dbc5de.
//
// Solidity: function cacheWallet() returns()
func (_WalletCache *WalletCacheTransactor) CacheWallet(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _WalletCache.contract.Transact(opts, "cacheWallet")
}

// CacheWallet is a paid mutator transaction binding the contract method 0x60dbc5de.
//
// Solidity: function cacheWallet() returns()
func (_WalletCache *WalletCacheSession) CacheWallet() (*types.Transaction, error) {
	return _WalletCache.Contract.CacheWallet(&_WalletCache.TransactOpts)
}

// CacheWallet is a paid mutator transaction binding the contract method 0x60dbc5de.
//
// Solidity: function cacheWallet() returns()
func (_WalletCache *WalletCacheTransactorSession) CacheWallet() (*types.Transaction, error) {
	return _WalletCache.Contract.CacheWallet(&_WalletCache.TransactOpts)
}

// WalletCachePop is a paid mutator transaction binding the contract method 0xa4570e51.
//
// Solidity: function walletCachePop() returns(address)
func (_WalletCache *WalletCacheTransactor) WalletCachePop(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _WalletCache.contract.Transact(opts, "walletCachePop")
}

// WalletCachePop is a paid mutator transaction binding the contract method 0xa4570e51.
//
// Solidity: function walletCachePop() returns(address)
func (_WalletCache *WalletCacheSession) WalletCachePop() (*types.Transaction, error) {
	return _WalletCache.Contract.WalletCachePop(&_WalletCache.TransactOpts)
}

// WalletCachePop is a paid mutator transaction binding the contract method 0xa4570e51.
//
// Solidity: function walletCachePop() returns(address)
func (_WalletCache *WalletCacheTransactorSession) WalletCachePop() (*types.Transaction, error) {
	return _WalletCache.Contract.WalletCachePop(&_WalletCache.TransactOpts)
}

// WalletCacheCachedWalletIterator is returned from FilterCachedWallet and is used to iterate over the raw logs and unpacked data for CachedWallet events raised by the WalletCache contract.
type WalletCacheCachedWalletIterator struct {
	Event *WalletCacheCachedWallet // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *WalletCacheCachedWalletIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(WalletCacheCachedWallet)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(WalletCacheCachedWallet)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *WalletCacheCachedWalletIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *WalletCacheCachedWalletIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// WalletCacheCachedWallet represents a CachedWallet event raised by the WalletCache contract.
type WalletCacheCachedWallet struct {
	Wallet common.Address
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterCachedWallet is a free log retrieval operation binding the contract event 0x9ede7876a6b2454072ceeaff4b6b4e6eaa5381db241b850f2a46034136fc2e6e.
//
// Solidity: event CachedWallet(address _wallet)
func (_WalletCache *WalletCacheFilterer) FilterCachedWallet(opts *bind.FilterOpts) (*WalletCacheCachedWalletIterator, error) {

	logs, sub, err := _WalletCache.contract.FilterLogs(opts, "CachedWallet")
	if err != nil {
		return nil, err
	}
	return &WalletCacheCachedWalletIterator{contract: _WalletCache.contract, event: "CachedWallet", logs: logs, sub: sub}, nil
}

// WatchCachedWallet is a free log subscription operation binding the contract event 0x9ede7876a6b2454072ceeaff4b6b4e6eaa5381db241b850f2a46034136fc2e6e.
//
// Solidity: event CachedWallet(address _wallet)
func (_WalletCache *WalletCacheFilterer) WatchCachedWallet(opts *bind.WatchOpts, sink chan<- *WalletCacheCachedWallet) (event.Subscription, error) {

	logs, sub, err := _WalletCache.contract.WatchLogs(opts, "CachedWallet")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(WalletCacheCachedWallet)
				if err := _WalletCache.contract.UnpackLog(event, "CachedWallet", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseCachedWallet is a log parse operation binding the contract event 0x9ede7876a6b2454072ceeaff4b6b4e6eaa5381db241b850f2a46034136fc2e6e.
//
// Solidity: event CachedWallet(address _wallet)
func (_WalletCache *WalletCacheFilterer) ParseCachedWallet(log types.Log) (*WalletCacheCachedWallet, error) {
	event := new(WalletCacheCachedWallet)
	if err := _WalletCache.contract.UnpackLog(event, "CachedWallet", log); err != nil {
		return nil, err
	}
	return event, nil
}
